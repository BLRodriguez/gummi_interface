/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-09-13 13:48:33.369001
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39;
x0=IKsin(j[0]);
x1=IKsin(j[3]);
x2=IKcos(j[1]);
x3=IKcos(j[3]);
x4=IKcos(j[2]);
x5=IKsin(j[1]);
x6=IKcos(j[0]);
x7=IKsin(j[2]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKcos(j[5]);
x12=((0.229)*x1);
x13=((1.0)*x1);
x14=((1.0)*x7);
x15=((1.0)*x5);
x16=((0.0103)*x7);
x17=((-1.0)*x9);
x18=(x0*x2);
x19=((-1.0)*x10);
x20=(x0*x4);
x21=(x2*x6);
x22=(x5*x6);
x23=(x4*x6);
x24=((1.0)*x2*x4);
x25=(x21*x3);
x26=(x0*x5*x7);
x27=(x2*x3*x7);
x28=((1.0)*x18*x3);
x29=((((-1.0)*x23))+x26);
x30=(((x22*x4))+(((-1.0)*x0*x14)));
x31=(((x14*x2*x3))+(((-1.0)*x13*x5)));
x32=(x1*x29);
x33=((((-1.0)*x15*x20))+(((-1.0)*x14*x6)));
x34=((((-1.0)*x13*x2*x7))+(((-1.0)*x15*x3)));
x35=((((-1.0)*x20))+(((-1.0)*x14*x22)));
x36=(x34*x9);
x37=(((x29*x3))+((x1*x18)));
x38=(x25+((x1*x35)));
x39=((((-1.0)*x13*x21))+((x3*x35)));
eerot[0]=(((x11*((((x9*(((((-1.0)*x28))+x32))))+((x10*x33))))))+((x37*x8)));
eerot[1]=(((x11*x37))+((x8*((((x17*(((((-1.0)*x18*x3))+x32))))+((x19*x33)))))));
eerot[2]=(((x33*x9))+((x10*(((((-1.0)*x13*x29))+x28)))));
eetrans[0]=(((x3*(((((-0.229)*x26))+(((0.229)*x23))))))+(((-1.0)*x12*x18))+(((-1.0)*x0*x16*x5))+(((0.0103)*x23))+(((0.2935)*x18)));
eerot[3]=(((x31*x8))+((x11*(((((-1.0)*x36))+(((-1.0)*x10*x24)))))));
eerot[4]=(((x11*x31))+((x8*((x36+((x10*x2*x4)))))));
eerot[5]=(((x10*x34))+(((-1.0)*x24*x9)));
eetrans[1]=((-0.129)+(((-0.229)*x27))+(((-0.2935)*x5))+(((-1.0)*x16*x2))+((x12*x5)));
eerot[6]=(((x11*((((x10*x30))+((x38*x9))))))+((x39*x8)));
eerot[7]=(((x11*x39))+((x8*((((x19*x30))+((x17*x38)))))));
eerot[8]=(((x30*x9))+((x10*(((((-1.0)*x25))+(((-1.0)*x13*x35)))))));
eetrans[2]=((0.107)+((x3*(((((0.229)*x20))+(((0.229)*x22*x7))))))+(((-0.2935)*x21))+((x16*x22))+(((0.0103)*x20))+((x12*x21)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=px;
new_r10=r20;
new_r11=r21;
new_r12=r22;
new_py=((-0.107)+pz);
new_r20=((-1.0)*r10);
new_r21=((-1.0)*r11);
new_r22=((-1.0)*r12);
new_pz=((-0.129)+(((-1.0)*py)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x40=((1.0)*px);
IkReal x41=((1.0)*pz);
IkReal x42=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x42))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x41)));
rxp0_2=((((-1.0)*r10*x40))+((py*r00)));
rxp1_0=((((-1.0)*r21*x42))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x41)));
rxp1_2=((((-1.0)*r11*x40))+((py*r01)));
rxp2_0=((((-1.0)*r22*x42))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x41))+((px*r22)));
rxp2_2=((((-1.0)*r12*x40))+((py*r02)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((-1.03110342841598)+(((7.43462639894301)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-1.03110342841598)+(((7.43462639894301)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x43=IKasin(((-1.03110342841598)+(((7.43462639894301)*pp))));
j3array[0]=((0.0350793006468366)+(((-1.0)*x43)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.17667195423663)+x43);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j5eval[2];
j5eval[0]=((npx*npx)+(npy*npy));
j5eval[1]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j4eval[0]=(sj3+(((28.495145631068)*cj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.53571702614806)+j3)))), 6.28318530717959)));
evalcond[1]=((-0.273195089453654)+pp);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((951474785.918173)*npz);
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[3];
sj3=-0.99938478;
cj3=0.03507211;
j3=-1.53571702312988;
IkReal x44=npx*npx;
IkReal x45=npy*npy;
IkReal x46=((1051.0)*cj4);
j5eval[0]=(x44+x45);
j5eval[1]=IKsign(((((1000000000000.0)*x45))+(((1000000000000.0)*x44))));
j5eval[2]=((IKabs(((((-1.0)*npx*x46))+(((-522680675663.0)*npy)))))+(IKabs(((((-522680675663.0)*npx))+((npy*x46))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj3=-0.99938478;
cj3=0.03507211;
j3=-1.53571702312988;
IkReal x47=npy*npy;
IkReal x48=npx*npx;
IkReal x49=((522680675663.0)*sj4);
IkReal x50=(sj4*x48);
IkReal x51=(sj4*x47);
IkReal x52=((1000000000000.0)*cj4*npz);
j5eval[0]=(x51+x50);
j5eval[1]=((IKabs(((((-1.0)*npx*x52))+(((-1.0)*npy*x49)))))+(IKabs(((((-1.0)*npx*x49))+((npy*x52))))));
j5eval[2]=IKsign(((((1000000000000.0)*x50))+(((1000000000000.0)*x51))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj3=-0.99938478;
cj3=0.03507211;
j3=-1.53571702312988;
IkReal x53=npx*npx;
IkReal x54=npy*npy;
IkReal x55=((522680675663.0)*cj4);
IkReal x56=(cj4*x54);
IkReal x57=(cj4*x53);
IkReal x58=((1000000000000.0)*npz*sj4);
j5eval[0]=(x57+x56);
j5eval[1]=IKsign(((((1000000000000.0)*x56))+(((1000000000000.0)*x57))));
j5eval[2]=((IKabs(((((-1051.0)*npx))+((npx*x58))+(((-1.0)*npy*x55)))))+(IKabs(((((1051.0)*npy))+(((-1.0)*npx*x55))+(((-1.0)*npy*x58))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((-0.273195089453654)+pp);
evalcond[2]=((1.051e-9)+(((-1.0)*npz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=-0.99938478;
cj3=0.03507211;
j3=-1.53571702312988;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x59=npx*npx;
IkReal x60=npy*npy;
j5eval[0]=((((-1.0)*x59))+(((-1.0)*x60)));
j5eval[1]=((IKabs(npy))+(IKabs(npx)));
j5eval[2]=IKsign(((((-1000000000000.0)*x60))+(((-1000000000000.0)*x59))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x61 = IKatan2WithCheck(IkReal(((522680675663.0)*npx)),((522680675663.0)*npy),IKFAST_ATAN2_MAGTHRESH);
if(!x61.valid){
continue;
}
CheckValue<IkReal> x62=IKPowWithIntegerCheck(IKsign(((((-1000000000000.0)*(npx*npx)))+(((-1000000000000.0)*(npy*npy))))),-1);
if(!x62.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x61.value)+(((1.5707963267949)*(x62.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x63=IKcos(j5);
IkReal x64=IKsin(j5);
IkReal x65=((1.0)*x63);
evalcond[0]=(((npy*x64))+(((-1.0)*npx*x65)));
evalcond[1]=((-0.522680675663)+(((-1.0)*npy*x65))+(((-1.0)*npx*x64)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((-0.273195089453654)+pp);
evalcond[2]=((-1.051e-9)+(((-1.0)*npz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=-0.99938478;
cj3=0.03507211;
j3=-1.53571702312988;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x677=npx*npx;
IkReal x678=npy*npy;
j5eval[0]=((((-1.0)*x677))+(((-1.0)*x678)));
j5eval[1]=((IKabs(npy))+(IKabs(npx)));
j5eval[2]=IKsign(((((-1000000000000.0)*x677))+(((-1000000000000.0)*x678))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x679 = IKatan2WithCheck(IkReal(((522680675663.0)*npx)),((522680675663.0)*npy),IKFAST_ATAN2_MAGTHRESH);
if(!x679.valid){
continue;
}
CheckValue<IkReal> x680=IKPowWithIntegerCheck(IKsign(((((-1000000000000.0)*(npx*npx)))+(((-1000000000000.0)*(npy*npy))))),-1);
if(!x680.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x679.value)+(((1.5707963267949)*(x680.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x681=IKcos(j5);
IkReal x682=IKsin(j5);
IkReal x683=((1.0)*npy);
evalcond[0]=((((-1.0)*x682*x683))+((npx*x681)));
evalcond[1]=((-0.522680675663)+(((-1.0)*x681*x683))+(((-1.0)*npx*x682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-0.273195089453654)+pp);
evalcond[2]=((-1.0)*npz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
sj3=-0.99938478;
cj3=0.03507211;
j3=-1.53571702312988;
sj4=0;
cj4=1.0;
j4=0;
IkReal x684=npx*npx;
IkReal x685=npy*npy;
j5eval[0]=(x685+x684);
j5eval[1]=IKsign(((((1000000000000.0)*x685))+(((1000000000000.0)*x684))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x686=IKPowWithIntegerCheck(IKsign(((((1000000000000.0)*(npx*npx)))+(((1000000000000.0)*(npy*npy))))),-1);
if(!x686.valid){
continue;
}
CheckValue<IkReal> x687 = IKatan2WithCheck(IkReal(((((1051.0)*npy))+(((-522680675663.0)*npx)))),((((-1051.0)*npx))+(((-522680675663.0)*npy))),IKFAST_ATAN2_MAGTHRESH);
if(!x687.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x686.value)))+(x687.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x688=IKcos(j5);
IkReal x689=IKsin(j5);
IkReal x690=((1.0)*x688);
evalcond[0]=((-1.051e-9)+((npy*x689))+(((-1.0)*npx*x690)));
evalcond[1]=((-0.522680675663)+(((-1.0)*npx*x689))+(((-1.0)*npy*x690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((-0.273195089453654)+pp);
evalcond[2]=((-1.0)*npz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
sj3=-0.99938478;
cj3=0.03507211;
j3=-1.53571702312988;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x691=npx*npx;
IkReal x692=npy*npy;
j5eval[0]=((((-1.0)*x691))+(((-1.0)*x692)));
j5eval[1]=IKsign(((((-1000000000000.0)*x692))+(((-1000000000000.0)*x691))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x693=IKPowWithIntegerCheck(IKsign(((((-1000000000000.0)*(npx*npx)))+(((-1000000000000.0)*(npy*npy))))),-1);
if(!x693.valid){
continue;
}
CheckValue<IkReal> x694 = IKatan2WithCheck(IkReal(((((1051.0)*npy))+(((522680675663.0)*npx)))),((((-1051.0)*npx))+(((522680675663.0)*npy))),IKFAST_ATAN2_MAGTHRESH);
if(!x694.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x693.value)))+(x694.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x695=IKcos(j5);
IkReal x696=IKsin(j5);
IkReal x697=((1.0)*x695);
evalcond[0]=((1.051e-9)+(((-1.0)*npx*x697))+((npy*x696)));
evalcond[1]=((-0.522680675663)+(((-1.0)*npx*x696))+(((-1.0)*npy*x697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x698=((522680675663.0)*cj4);
IkReal x699=((1000000000000.0)*cj4);
IkReal x700=((1000000000000.0)*npz*sj4);
CheckValue<IkReal> x701=IKPowWithIntegerCheck(IKsign((((x699*(npy*npy)))+((x699*(npx*npx))))),-1);
if(!x701.valid){
continue;
}
CheckValue<IkReal> x702 = IKatan2WithCheck(IkReal(((((1051.0)*npy))+(((-1.0)*npy*x700))+(((-1.0)*npx*x698)))),((((-1051.0)*npx))+(((-1.0)*npy*x698))+((npx*x700))),IKFAST_ATAN2_MAGTHRESH);
if(!x702.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x701.value)))+(x702.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x703=IKsin(j5);
IkReal x704=IKcos(j5);
IkReal x705=(npy*x703);
IkReal x706=((1.0)*x704);
evalcond[0]=((-0.522680675663)+(((-1.0)*npx*x703))+(((-1.0)*npy*x706)));
evalcond[1]=((((-1.051e-9)*cj4))+(((-1.0)*npx*x706))+x705);
evalcond[2]=((((-1.0)*cj4*npz))+(((-1.0)*npx*sj4*x706))+((sj4*x705)));
evalcond[3]=((-1.051e-9)+((cj4*x705))+((npz*sj4))+(((-1.0)*cj4*npx*x706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x707=((1000000000000.0)*sj4);
IkReal x708=((522680675663.0)*sj4);
IkReal x709=((1000000000000.0)*cj4*npz);
CheckValue<IkReal> x710 = IKatan2WithCheck(IkReal((((npy*x709))+(((-1.0)*npx*x708)))),((((-1.0)*npy*x708))+(((-1.0)*npx*x709))),IKFAST_ATAN2_MAGTHRESH);
if(!x710.valid){
continue;
}
CheckValue<IkReal> x711=IKPowWithIntegerCheck(IKsign((((x707*(npx*npx)))+((x707*(npy*npy))))),-1);
if(!x711.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x710.value)+(((1.5707963267949)*(x711.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x712=IKsin(j5);
IkReal x713=IKcos(j5);
IkReal x714=(npy*x712);
IkReal x715=((1.0)*x713);
evalcond[0]=((-0.522680675663)+(((-1.0)*npx*x712))+(((-1.0)*npy*x715)));
evalcond[1]=((((-1.051e-9)*cj4))+(((-1.0)*npx*x715))+x714);
evalcond[2]=(((sj4*x714))+(((-1.0)*cj4*npz))+(((-1.0)*npx*sj4*x715)));
evalcond[3]=((-1.051e-9)+((cj4*x714))+((npz*sj4))+(((-1.0)*cj4*npx*x715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x716=((1051.0)*cj4);
CheckValue<IkReal> x717=IKPowWithIntegerCheck(IKsign(((((1000000000000.0)*(npx*npx)))+(((1000000000000.0)*(npy*npy))))),-1);
if(!x717.valid){
continue;
}
CheckValue<IkReal> x718 = IKatan2WithCheck(IkReal((((npy*x716))+(((-522680675663.0)*npx)))),((((-522680675663.0)*npy))+(((-1.0)*npx*x716))),IKFAST_ATAN2_MAGTHRESH);
if(!x718.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x717.value)))+(x718.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x719=IKsin(j5);
IkReal x720=IKcos(j5);
IkReal x721=(npy*x719);
IkReal x722=((1.0)*x720);
evalcond[0]=((-0.522680675663)+(((-1.0)*npx*x719))+(((-1.0)*npy*x722)));
evalcond[1]=((((-1.051e-9)*cj4))+(((-1.0)*npx*x722))+x721);
evalcond[2]=((((-1.0)*cj4*npz))+((sj4*x721))+(((-1.0)*npx*sj4*x722)));
evalcond[3]=((-1.051e-9)+((cj4*x721))+((npz*sj4))+(((-1.0)*cj4*npx*x722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.60587562744173)+j3)))), 6.28318530717959)));
evalcond[1]=((-0.004183590546346)+pp);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((-951474785.918173)*npz);
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[3];
sj3=0.99938478;
cj3=-0.03507211;
j3=1.60587562913992;
IkReal x723=npx*npx;
IkReal x724=npy*npy;
IkReal x725=((1051.0)*cj4);
j5eval[0]=(x723+x724);
j5eval[1]=((IKabs(((((64680675663.0)*npx))+(((-1.0)*npy*x725)))))+(IKabs(((((64680675663.0)*npy))+((npx*x725))))));
j5eval[2]=IKsign(((((1000000000000.0)*x724))+(((1000000000000.0)*x723))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj3=0.99938478;
cj3=-0.03507211;
j3=1.60587562913992;
IkReal x726=npy*npy;
IkReal x727=npx*npx;
IkReal x728=((64680675663.0)*sj4);
IkReal x729=(sj4*x727);
IkReal x730=(sj4*x726);
IkReal x731=((1000000000000.0)*cj4*npz);
j5eval[0]=(x730+x729);
j5eval[1]=IKsign(((((1000000000000.0)*x730))+(((1000000000000.0)*x729))));
j5eval[2]=((IKabs((((npy*x728))+(((-1.0)*npx*x731)))))+(IKabs((((npy*x731))+((npx*x728))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj3=0.99938478;
cj3=-0.03507211;
j3=1.60587562913992;
IkReal x732=npx*npx;
IkReal x733=npy*npy;
IkReal x734=((64680675663.0)*cj4);
IkReal x735=(cj4*x732);
IkReal x736=((1000000000000.0)*npz*sj4);
IkReal x737=(cj4*x733);
j5eval[0]=(x737+x735);
j5eval[1]=((IKabs(((((1051.0)*npx))+((npy*x734))+((npx*x736)))))+(IKabs(((((-1051.0)*npy))+(((-1.0)*npy*x736))+((npx*x734))))));
j5eval[2]=IKsign(((((1000000000000.0)*x737))+(((1000000000000.0)*x735))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((-0.004183590546346)+pp);
evalcond[2]=((-1.051e-9)+(((-1.0)*npz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=0.99938478;
cj3=-0.03507211;
j3=1.60587562913992;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x738=npx*npx;
IkReal x739=npy*npy;
j5eval[0]=(x739+x738);
j5eval[1]=((IKabs(npy))+(IKabs(npx)));
j5eval[2]=IKsign(((((1000000000000.0)*x739))+(((1000000000000.0)*x738))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x740=IKPowWithIntegerCheck(IKsign(((((1000000000000.0)*(npx*npx)))+(((1000000000000.0)*(npy*npy))))),-1);
if(!x740.valid){
continue;
}
CheckValue<IkReal> x741 = IKatan2WithCheck(IkReal(((64680675663.0)*npx)),((64680675663.0)*npy),IKFAST_ATAN2_MAGTHRESH);
if(!x741.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x740.value)))+(x741.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x742=IKcos(j5);
IkReal x743=IKsin(j5);
IkReal x744=((1.0)*x742);
evalcond[0]=(((npy*x743))+(((-1.0)*npx*x744)));
evalcond[1]=((0.064680675663)+(((-1.0)*npy*x744))+(((-1.0)*npx*x743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((-0.004183590546346)+pp);
evalcond[2]=((1.051e-9)+(((-1.0)*npz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=0.99938478;
cj3=-0.03507211;
j3=1.60587562913992;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x745=npx*npx;
IkReal x746=npy*npy;
j5eval[0]=(x746+x745);
j5eval[1]=((IKabs(npy))+(IKabs(npx)));
j5eval[2]=IKsign(((((1000000000000.0)*x745))+(((1000000000000.0)*x746))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x747=IKPowWithIntegerCheck(IKsign(((((1000000000000.0)*(npx*npx)))+(((1000000000000.0)*(npy*npy))))),-1);
if(!x747.valid){
continue;
}
CheckValue<IkReal> x748 = IKatan2WithCheck(IkReal(((64680675663.0)*npx)),((64680675663.0)*npy),IKFAST_ATAN2_MAGTHRESH);
if(!x748.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x747.value)))+(x748.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x749=IKcos(j5);
IkReal x750=IKsin(j5);
IkReal x751=((1.0)*npy);
evalcond[0]=(((npx*x749))+(((-1.0)*x750*x751)));
evalcond[1]=((0.064680675663)+(((-1.0)*npx*x750))+(((-1.0)*x749*x751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-0.004183590546346)+pp);
evalcond[2]=((-1.0)*npz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
sj3=0.99938478;
cj3=-0.03507211;
j3=1.60587562913992;
sj4=0;
cj4=1.0;
j4=0;
IkReal x752=npx*npx;
IkReal x753=npy*npy;
j5eval[0]=(x753+x752);
j5eval[1]=IKsign(((((1000000000000.0)*x752))+(((1000000000000.0)*x753))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x754=IKPowWithIntegerCheck(IKsign(((((1000000000000.0)*(npx*npx)))+(((1000000000000.0)*(npy*npy))))),-1);
if(!x754.valid){
continue;
}
CheckValue<IkReal> x755 = IKatan2WithCheck(IkReal(((((-1051.0)*npy))+(((64680675663.0)*npx)))),((((1051.0)*npx))+(((64680675663.0)*npy))),IKFAST_ATAN2_MAGTHRESH);
if(!x755.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x754.value)))+(x755.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x756=IKcos(j5);
IkReal x757=IKsin(j5);
IkReal x758=((1.0)*x756);
evalcond[0]=((1.051e-9)+(((-1.0)*npx*x758))+((npy*x757)));
evalcond[1]=((0.064680675663)+(((-1.0)*npx*x757))+(((-1.0)*npy*x758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((-0.004183590546346)+pp);
evalcond[2]=((-1.0)*npz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
sj3=0.99938478;
cj3=-0.03507211;
j3=1.60587562913992;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x759=npx*npx;
IkReal x760=npy*npy;
j5eval[0]=(x759+x760);
j5eval[1]=IKsign(((((1000000000000.0)*x759))+(((1000000000000.0)*x760))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x761=IKPowWithIntegerCheck(IKsign(((((1000000000000.0)*(npx*npx)))+(((1000000000000.0)*(npy*npy))))),-1);
if(!x761.valid){
continue;
}
CheckValue<IkReal> x762 = IKatan2WithCheck(IkReal(((((1051.0)*npy))+(((64680675663.0)*npx)))),((((-1051.0)*npx))+(((64680675663.0)*npy))),IKFAST_ATAN2_MAGTHRESH);
if(!x762.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x761.value)))+(x762.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x763=IKcos(j5);
IkReal x764=IKsin(j5);
IkReal x765=((1.0)*x763);
evalcond[0]=((-1.051e-9)+((npy*x764))+(((-1.0)*npx*x765)));
evalcond[1]=((0.064680675663)+(((-1.0)*npy*x765))+(((-1.0)*npx*x764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x766=((64680675663.0)*cj4);
IkReal x767=((1000000000000.0)*cj4);
IkReal x768=((1000000000000.0)*npz*sj4);
CheckValue<IkReal> x769 = IKatan2WithCheck(IkReal(((((-1051.0)*npy))+(((-1.0)*npy*x768))+((npx*x766)))),(((npy*x766))+(((1051.0)*npx))+((npx*x768))),IKFAST_ATAN2_MAGTHRESH);
if(!x769.valid){
continue;
}
CheckValue<IkReal> x770=IKPowWithIntegerCheck(IKsign((((x767*(npy*npy)))+((x767*(npx*npx))))),-1);
if(!x770.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x769.value)+(((1.5707963267949)*(x770.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x771=IKsin(j5);
IkReal x772=IKcos(j5);
IkReal x773=(npy*x771);
IkReal x774=((1.0)*npx*x772);
evalcond[0]=((0.064680675663)+(((-1.0)*npy*x772))+(((-1.0)*npx*x771)));
evalcond[1]=(x773+(((-1.0)*x774))+(((1.051e-9)*cj4)));
evalcond[2]=(((sj4*x773))+(((-1.0)*sj4*x774))+(((-1.0)*cj4*npz)));
evalcond[3]=((1.051e-9)+((npz*sj4))+(((-1.0)*cj4*x774))+((cj4*x773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x775=((1000000000000.0)*sj4);
IkReal x776=((64680675663.0)*sj4);
IkReal x777=((1000000000000.0)*cj4*npz);
CheckValue<IkReal> x778=IKPowWithIntegerCheck(IKsign((((x775*(npx*npx)))+((x775*(npy*npy))))),-1);
if(!x778.valid){
continue;
}
CheckValue<IkReal> x779 = IKatan2WithCheck(IkReal((((npy*x777))+((npx*x776)))),(((npy*x776))+(((-1.0)*npx*x777))),IKFAST_ATAN2_MAGTHRESH);
if(!x779.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x778.value)))+(x779.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x780=IKsin(j5);
IkReal x781=IKcos(j5);
IkReal x782=(npy*x780);
IkReal x783=((1.0)*npx*x781);
evalcond[0]=((0.064680675663)+(((-1.0)*npx*x780))+(((-1.0)*npy*x781)));
evalcond[1]=((((-1.0)*x783))+x782+(((1.051e-9)*cj4)));
evalcond[2]=(((sj4*x782))+(((-1.0)*cj4*npz))+(((-1.0)*sj4*x783)));
evalcond[3]=((1.051e-9)+((npz*sj4))+((cj4*x782))+(((-1.0)*cj4*x783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x784=((1051.0)*cj4);
CheckValue<IkReal> x785 = IKatan2WithCheck(IkReal(((((64680675663.0)*npx))+(((-1.0)*npy*x784)))),((((64680675663.0)*npy))+((npx*x784))),IKFAST_ATAN2_MAGTHRESH);
if(!x785.valid){
continue;
}
CheckValue<IkReal> x786=IKPowWithIntegerCheck(IKsign(((((1000000000000.0)*(npx*npx)))+(((1000000000000.0)*(npy*npy))))),-1);
if(!x786.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x785.value)+(((1.5707963267949)*(x786.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x787=IKsin(j5);
IkReal x788=IKcos(j5);
IkReal x789=(npy*x787);
IkReal x790=((1.0)*npx*x788);
evalcond[0]=((0.064680675663)+(((-1.0)*npx*x787))+(((-1.0)*npy*x788)));
evalcond[1]=((((-1.0)*x790))+x789+(((1.051e-9)*cj4)));
evalcond[2]=(((sj4*x789))+(((-1.0)*cj4*npz))+(((-1.0)*sj4*x790)));
evalcond[3]=((1.051e-9)+((npz*sj4))+((cj4*x789))+(((-1.0)*cj4*x790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x791=IKPowWithIntegerCheck(((((0.0103)*sj3))+(((0.2935)*cj3))),-1);
if(!x791.valid){
continue;
}
sj4array[0]=(npz*(x791.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[3];
IkReal x792=(npx*sj4);
IkReal x793=(cj4*npz);
IkReal x794=((0.2935)*sj3);
IkReal x795=((0.0103)*cj3);
IkReal x796=(npy*sj4);
IkReal x797=(((npy*x796))+((npx*x792)));
j5eval[0]=x797;
j5eval[1]=IKsign(x797);
j5eval[2]=((IKabs(((((-1.0)*x795*x796))+(((-0.229)*x796))+(((-1.0)*npx*x793))+((x794*x796)))))+(IKabs((((npy*x793))+(((-1.0)*x792*x795))+(((-0.229)*x792))+((x792*x794))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x798=((0.2935)*sj3);
IkReal x799=(cj3*npx);
IkReal x800=((0.2935)*cj4);
IkReal x801=(cj3*npy);
IkReal x802=((0.0103)*cj4*sj3);
IkReal x803=((npx*npx)+(npy*npy));
j5eval[0]=x803;
j5eval[1]=IKsign(x803);
j5eval[2]=((IKabs(((((-0.229)*npx))+((npy*x802))+((x800*x801))+((npx*x798))+(((-0.0103)*x799)))))+(IKabs(((((-0.229)*npy))+(((-0.0103)*x801))+((npy*x798))+(((-1.0)*x799*x800))+(((-1.0)*npx*x802))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x804=((0.0103)*sj3);
IkReal x805=(npz*sj4);
IkReal x806=(cj4*npx);
IkReal x807=((0.2935)*sj3);
IkReal x808=(cj4*npy);
IkReal x809=((0.2935)*cj3);
IkReal x810=((0.0103)*cj3);
IkReal x811=(((npy*x808))+((npx*x806)));
j5eval[0]=x811;
j5eval[1]=((IKabs(((((-1.0)*x808*x810))+((npx*x805))+(((-0.229)*x808))+(((-1.0)*npx*x804))+(((-1.0)*npx*x809))+((x807*x808)))))+(IKabs((((npy*x809))+((npy*x804))+(((-1.0)*npy*x805))+((x806*x807))+(((-0.229)*x806))+(((-1.0)*x806*x810))))));
j5eval[2]=IKsign(x811);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x812=((((0.0103)*sj3))+(((0.2935)*cj3)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((-0.13868934)+(((-0.0047174)*cj3))+(((0.134423)*sj3))+pp);
evalcond[2]=((((-1.0)*npz))+x812);
evalcond[3]=((((-1.0)*x812))+npz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x813=((2935.0)*sj3);
IkReal x814=((103.0)*cj3);
IkReal x815=((npx*npx)+(npy*npy));
j5eval[0]=x815;
j5eval[1]=((IKabs(((((-1.0)*npx*x814))+(((-2290.0)*npx))+((npx*x813)))))+(IKabs(((((-1.0)*npy*x814))+(((-2290.0)*npy))+((npy*x813))))));
j5eval[2]=IKsign(x815);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x816=((0.2935)*sj3);
IkReal x817=((0.0103)*cj3);
CheckValue<IkReal> x818 = IKatan2WithCheck(IkReal(((((-0.229)*npx))+(((-1.0)*npx*x817))+((npx*x816)))),((((-0.229)*npy))+(((-1.0)*npy*x817))+((npy*x816))),IKFAST_ATAN2_MAGTHRESH);
if(!x818.valid){
continue;
}
CheckValue<IkReal> x819=IKPowWithIntegerCheck(IKsign(((npx*npx)+(npy*npy))),-1);
if(!x819.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x818.value)+(((1.5707963267949)*(x819.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x820=IKcos(j5);
IkReal x821=IKsin(j5);
IkReal x822=((1.0)*x820);
evalcond[0]=((((-1.0)*npx*x822))+((npy*x821)));
evalcond[1]=((-0.229)+(((-0.0103)*cj3))+(((-1.0)*npy*x822))+(((0.2935)*sj3))+(((-1.0)*npx*x821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x823=((((-0.2935)*cj3))+(((-1.0)*npz))+(((-0.0103)*sj3)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((-0.13868934)+(((-0.0047174)*cj3))+(((0.134423)*sj3))+pp);
evalcond[2]=x823;
evalcond[3]=x823;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x824=((2935.0)*sj3);
IkReal x825=((103.0)*cj3);
IkReal x826=((npx*npx)+(npy*npy));
j5eval[0]=x826;
j5eval[1]=((IKabs(((((-2290.0)*npy))+(((-1.0)*npy*x825))+((npy*x824)))))+(IKabs(((((-1.0)*npx*x825))+(((-2290.0)*npx))+((npx*x824))))));
j5eval[2]=IKsign(x826);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x827=((0.2935)*sj3);
IkReal x828=((0.0103)*cj3);
CheckValue<IkReal> x829 = IKatan2WithCheck(IkReal(((((-0.229)*npx))+(((-1.0)*npx*x828))+((npx*x827)))),((((-0.229)*npy))+(((-1.0)*npy*x828))+((npy*x827))),IKFAST_ATAN2_MAGTHRESH);
if(!x829.valid){
continue;
}
CheckValue<IkReal> x830=IKPowWithIntegerCheck(IKsign(((npx*npx)+(npy*npy))),-1);
if(!x830.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x829.value)+(((1.5707963267949)*(x830.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x831=IKcos(j5);
IkReal x832=IKsin(j5);
IkReal x833=((1.0)*npy);
evalcond[0]=((((-1.0)*x832*x833))+((npx*x831)));
evalcond[1]=((-0.229)+(((-0.0103)*cj3))+(((-1.0)*npx*x832))+(((0.2935)*sj3))+(((-1.0)*x831*x833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-0.13868934)+(((-0.0047174)*cj3))+(((0.134423)*sj3))+pp);
evalcond[2]=((-1.0)*npz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x834=((0.2935)*npx);
IkReal x835=(npy*sj3);
IkReal x836=((0.0103)*npx);
IkReal x837=(cj3*npy);
IkReal x838=((npx*npx)+(npy*npy));
j5eval[0]=x838;
j5eval[1]=((IKabs(((((-0.229)*npx))+(((0.2935)*x837))+((sj3*x834))+(((-1.0)*cj3*x836))+(((0.0103)*x835)))))+(IKabs(((((-0.229)*npy))+(((-0.0103)*x837))+(((0.2935)*x835))+(((-1.0)*cj3*x834))+(((-1.0)*sj3*x836))))));
j5eval[2]=IKsign(x838);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x839=(npy*sj3);
IkReal x840=((0.2935)*npx);
IkReal x841=((0.0103)*npx);
IkReal x842=(cj3*npy);
CheckValue<IkReal> x843 = IKatan2WithCheck(IkReal(((((-0.229)*npx))+(((0.2935)*x842))+((sj3*x840))+(((0.0103)*x839))+(((-1.0)*cj3*x841)))),((((-0.229)*npy))+(((-1.0)*sj3*x841))+(((-0.0103)*x842))+(((0.2935)*x839))+(((-1.0)*cj3*x840))),IKFAST_ATAN2_MAGTHRESH);
if(!x843.valid){
continue;
}
CheckValue<IkReal> x844=IKPowWithIntegerCheck(IKsign(((npx*npx)+(npy*npy))),-1);
if(!x844.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x843.value)+(((1.5707963267949)*(x844.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x845=IKcos(j5);
IkReal x846=IKsin(j5);
IkReal x847=((1.0)*x845);
evalcond[0]=((((-0.2935)*cj3))+(((-1.0)*npx*x847))+((npy*x846))+(((-0.0103)*sj3)));
evalcond[1]=((-0.229)+(((-1.0)*npy*x847))+(((-0.0103)*cj3))+(((-1.0)*npx*x846))+(((0.2935)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((-0.13868934)+(((-0.0047174)*cj3))+(((0.134423)*sj3))+pp);
evalcond[2]=((-1.0)*npz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x848=(npx*sj3);
IkReal x849=(npy*sj3);
IkReal x850=((0.2935)*cj3);
IkReal x851=((0.0103)*cj3);
IkReal x852=((npx*npx)+(npy*npy));
j5eval[0]=x852;
j5eval[1]=IKsign(x852);
j5eval[2]=((IKabs(((((-0.229)*npx))+(((-0.0103)*x849))+(((-1.0)*npy*x850))+(((-1.0)*npx*x851))+(((0.2935)*x848)))))+(IKabs(((((-0.229)*npy))+(((-1.0)*npy*x851))+(((0.2935)*x849))+((npx*x850))+(((0.0103)*x848))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x853=(npx*sj3);
IkReal x854=(npy*sj3);
IkReal x855=((0.2935)*cj3);
IkReal x856=((0.0103)*cj3);
CheckValue<IkReal> x857 = IKatan2WithCheck(IkReal(((((-0.229)*npx))+(((0.2935)*x853))+(((-1.0)*npy*x855))+(((-1.0)*npx*x856))+(((-0.0103)*x854)))),((((-0.229)*npy))+(((0.2935)*x854))+(((0.0103)*x853))+(((-1.0)*npy*x856))+((npx*x855))),IKFAST_ATAN2_MAGTHRESH);
if(!x857.valid){
continue;
}
CheckValue<IkReal> x858=IKPowWithIntegerCheck(IKsign(((npx*npx)+(npy*npy))),-1);
if(!x858.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x857.value)+(((1.5707963267949)*(x858.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x859=IKcos(j5);
IkReal x860=IKsin(j5);
IkReal x861=((1.0)*x859);
evalcond[0]=((((0.0103)*sj3))+(((0.2935)*cj3))+(((-1.0)*npx*x861))+((npy*x860)));
evalcond[1]=((-0.229)+(((-0.0103)*cj3))+(((-1.0)*npx*x860))+(((0.2935)*sj3))+(((-1.0)*npy*x861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x862=((0.0103)*sj3);
IkReal x863=(npz*sj4);
IkReal x864=(cj4*npx);
IkReal x865=((0.2935)*sj3);
IkReal x866=(cj4*npy);
IkReal x867=((0.2935)*cj3);
IkReal x868=((0.0103)*cj3);
CheckValue<IkReal> x869=IKPowWithIntegerCheck(IKsign((((npx*x864))+((npy*x866)))),-1);
if(!x869.valid){
continue;
}
CheckValue<IkReal> x870 = IKatan2WithCheck(IkReal(((((-0.229)*x864))+(((-1.0)*x864*x868))+((x864*x865))+(((-1.0)*npy*x863))+((npy*x862))+((npy*x867)))),((((-1.0)*x866*x868))+(((-0.229)*x866))+((npx*x863))+(((-1.0)*npx*x862))+(((-1.0)*npx*x867))+((x865*x866))),IKFAST_ATAN2_MAGTHRESH);
if(!x870.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x869.value)))+(x870.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x871=IKcos(j5);
IkReal x872=IKsin(j5);
IkReal x873=((0.0103)*sj3);
IkReal x874=((0.2935)*cj3);
IkReal x875=(npy*x872);
IkReal x876=((1.0)*x871);
evalcond[0]=((((-1.0)*cj4*npz))+((sj4*x875))+(((-1.0)*npx*sj4*x876)));
evalcond[1]=((-0.229)+(((-0.0103)*cj3))+(((-1.0)*npx*x872))+(((-1.0)*npy*x876))+(((0.2935)*sj3)));
evalcond[2]=((((-1.0)*npx*x876))+(((-1.0)*cj4*x873))+(((-1.0)*cj4*x874))+x875);
evalcond[3]=(((npz*sj4))+((cj4*x875))+(((-1.0)*cj4*npx*x876))+(((-1.0)*x874))+(((-1.0)*x873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x877=((0.2935)*sj3);
IkReal x878=(cj3*npx);
IkReal x879=((0.2935)*cj4);
IkReal x880=(cj3*npy);
IkReal x881=((0.0103)*cj4*sj3);
CheckValue<IkReal> x882=IKPowWithIntegerCheck(IKsign(((npx*npx)+(npy*npy))),-1);
if(!x882.valid){
continue;
}
CheckValue<IkReal> x883 = IKatan2WithCheck(IkReal(((((-0.229)*npx))+((x879*x880))+((npx*x877))+((npy*x881))+(((-0.0103)*x878)))),((((-0.229)*npy))+(((-1.0)*npx*x881))+(((-0.0103)*x880))+(((-1.0)*x878*x879))+((npy*x877))),IKFAST_ATAN2_MAGTHRESH);
if(!x883.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x882.value)))+(x883.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x884=IKcos(j5);
IkReal x885=IKsin(j5);
IkReal x886=((0.0103)*sj3);
IkReal x887=((0.2935)*cj3);
IkReal x888=(npy*x885);
IkReal x889=((1.0)*x884);
evalcond[0]=(((sj4*x888))+(((-1.0)*npx*sj4*x889))+(((-1.0)*cj4*npz)));
evalcond[1]=((-0.229)+(((-0.0103)*cj3))+(((-1.0)*npy*x889))+(((0.2935)*sj3))+(((-1.0)*npx*x885)));
evalcond[2]=((((-1.0)*npx*x889))+(((-1.0)*cj4*x886))+(((-1.0)*cj4*x887))+x888);
evalcond[3]=(((npz*sj4))+(((-1.0)*x886))+(((-1.0)*x887))+((cj4*x888))+(((-1.0)*cj4*npx*x889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x890=((0.229)*sj4);
IkReal x891=(cj4*npz);
IkReal x892=(npx*sj4);
IkReal x893=((0.2935)*sj3);
IkReal x894=((0.0103)*cj3);
IkReal x895=(npy*sj4);
CheckValue<IkReal> x896 = IKatan2WithCheck(IkReal(((((-1.0)*x892*x894))+(((-1.0)*npx*x890))+((npy*x891))+((x892*x893)))),((((-1.0)*npy*x890))+((x893*x895))+(((-1.0)*x894*x895))+(((-1.0)*npx*x891))),IKFAST_ATAN2_MAGTHRESH);
if(!x896.valid){
continue;
}
CheckValue<IkReal> x897=IKPowWithIntegerCheck(IKsign((((npy*x895))+((npx*x892)))),-1);
if(!x897.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x896.value)+(((1.5707963267949)*(x897.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x898=IKcos(j5);
IkReal x899=IKsin(j5);
IkReal x900=((0.0103)*sj3);
IkReal x901=((0.2935)*cj3);
IkReal x902=(npy*x899);
IkReal x903=((1.0)*x898);
evalcond[0]=((((-1.0)*cj4*npz))+(((-1.0)*npx*sj4*x903))+((sj4*x902)));
evalcond[1]=((-0.229)+(((-0.0103)*cj3))+(((0.2935)*sj3))+(((-1.0)*npy*x903))+(((-1.0)*npx*x899)));
evalcond[2]=((((-1.0)*cj4*x901))+(((-1.0)*cj4*x900))+(((-1.0)*npx*x903))+x902);
evalcond[3]=(((npz*sj4))+(((-1.0)*x901))+(((-1.0)*x900))+((cj4*x902))+(((-1.0)*cj4*npx*x903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x906 = IKatan2WithCheck(IkReal(((-1.0)*npy)),((-1.0)*npx),IKFAST_ATAN2_MAGTHRESH);
if(!x906.valid){
continue;
}
IkReal x904=((1.0)*(x906.value));
if((((npx*npx)+(npy*npy))) < -0.00001)
continue;
CheckValue<IkReal> x907=IKPowWithIntegerCheck(IKabs(IKsqrt(((npx*npx)+(npy*npy)))),-1);
if(!x907.valid){
continue;
}
if( (((x907.value)*(((-0.229)+(((-0.0103)*cj3))+(((0.2935)*sj3)))))) < -1-IKFAST_SINCOS_THRESH || (((x907.value)*(((-0.229)+(((-0.0103)*cj3))+(((0.2935)*sj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x905=IKasin(((x907.value)*(((-0.229)+(((-0.0103)*cj3))+(((0.2935)*sj3))))));
j5array[0]=((((-1.0)*x904))+(((-1.0)*x905)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x904))+x905);
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[3];
j4eval[0]=(sj3+(((28.495145631068)*cj3)));
j4eval[1]=((IKabs(npz))+(IKabs(((((-1.0)*cj5*npx))+((npy*sj5))))));
j4eval[2]=IKsign(((((0.0103)*sj3))+(((0.2935)*cj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x908=(cj5*npx);
IkReal x909=(npy*sj5);
IkReal x910=((28.495145631068)*cj3);
j4eval[0]=(sj3+x910);
j4eval[1]=(((x909*x910))+(((-1.0)*x908*x910))+((sj3*x909))+(((-1.0)*sj3*x908)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.53571702614806)+j3)))), 6.28318530717959)));
evalcond[1]=((-0.273195089453654)+pp);
evalcond[2]=((-0.522680675663)+(((-1.0)*cj5*npy))+(((-1.0)*npx*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((951474785.918173)*npz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-951474785.918173)*cj5*npx))+(((951474785.918173)*npy*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((951474785.918173)*npz))+IKsqr(((((-951474785.918173)*cj5*npx))+(((951474785.918173)*npy*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((951474785.918173)*npz), ((((-951474785.918173)*cj5*npx))+(((951474785.918173)*npy*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x911=IKsin(j4);
IkReal x912=IKcos(j4);
IkReal x913=(npy*sj5);
IkReal x914=((1.0)*npz);
IkReal x915=((1.0)*cj5*npx);
evalcond[0]=((((-1.0)*x914))+(((1.051e-9)*x911)));
evalcond[1]=((((-1.0)*x915))+(((-1.051e-9)*x912))+x913);
evalcond[2]=(((x911*x913))+(((-1.0)*x912*x914))+(((-1.0)*x911*x915)));
evalcond[3]=((-1.051e-9)+(((-1.0)*x912*x915))+((x912*x913))+((npz*x911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.60587562744173)+j3)))), 6.28318530717959)));
evalcond[1]=((-0.004183590546346)+pp);
evalcond[2]=((0.064680675663)+(((-1.0)*cj5*npy))+(((-1.0)*npx*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-951474785.918173)*npz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-951474785.918173)*npy*sj5))+(((951474785.918173)*cj5*npx)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-951474785.918173)*npz))+IKsqr(((((-951474785.918173)*npy*sj5))+(((951474785.918173)*cj5*npx))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-951474785.918173)*npz), ((((-951474785.918173)*npy*sj5))+(((951474785.918173)*cj5*npx))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x916=IKsin(j4);
IkReal x917=IKcos(j4);
IkReal x918=(npy*sj5);
IkReal x919=((1.0)*npz);
IkReal x920=((1.0)*cj5*npx);
evalcond[0]=((((-1.0)*x919))+(((-1.051e-9)*x916)));
evalcond[1]=((((-1.0)*x920))+(((1.051e-9)*x917))+x918);
evalcond[2]=(((x916*x918))+(((-1.0)*x916*x920))+(((-1.0)*x917*x919)));
evalcond[3]=((1.051e-9)+((x917*x918))+((npz*x916))+(((-1.0)*x917*x920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x921=((0.0103)*sj3);
IkReal x922=(cj5*npx);
IkReal x923=((0.2935)*cj3);
IkReal x924=(npy*sj5);
CheckValue<IkReal> x925=IKPowWithIntegerCheck((x923+x921),-1);
if(!x925.valid){
continue;
}
CheckValue<IkReal> x926=IKPowWithIntegerCheck((((x921*x924))+((x923*x924))+(((-1.0)*x921*x922))+(((-1.0)*x922*x923))),-1);
if(!x926.valid){
continue;
}
if( IKabs((npz*(x925.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x926.value)*(((0.00010609)+(((0.0060461)*cj3*sj3))+(((-1.0)*(npz*npz)))+(((0.08603616)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((npz*(x925.value)))+IKsqr(((x926.value)*(((0.00010609)+(((0.0060461)*cj3*sj3))+(((-1.0)*(npz*npz)))+(((0.08603616)*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((npz*(x925.value)), ((x926.value)*(((0.00010609)+(((0.0060461)*cj3*sj3))+(((-1.0)*(npz*npz)))+(((0.08603616)*(cj3*cj3)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x927=IKsin(j4);
IkReal x928=IKcos(j4);
IkReal x929=((0.0103)*sj3);
IkReal x930=((1.0)*npz);
IkReal x931=(npy*sj5);
IkReal x932=((0.2935)*cj3);
IkReal x933=((1.0)*cj5*npx);
evalcond[0]=(((x927*x932))+((x927*x929))+(((-1.0)*x930)));
evalcond[1]=(((x927*x931))+(((-1.0)*x928*x930))+(((-1.0)*x927*x933)));
evalcond[2]=((((-1.0)*x928*x932))+(((-1.0)*x928*x929))+x931+(((-1.0)*x933)));
evalcond[3]=((((-1.0)*x929))+((npz*x927))+(((-1.0)*x928*x933))+((x928*x931))+(((-1.0)*x932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x934=IKPowWithIntegerCheck(IKsign(((((0.0103)*sj3))+(((0.2935)*cj3)))),-1);
if(!x934.valid){
continue;
}
CheckValue<IkReal> x935 = IKatan2WithCheck(IkReal(npz),((((-1.0)*cj5*npx))+((npy*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x934.value)))+(x935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x936=IKsin(j4);
IkReal x937=IKcos(j4);
IkReal x938=((0.0103)*sj3);
IkReal x939=((1.0)*npz);
IkReal x940=(npy*sj5);
IkReal x941=((0.2935)*cj3);
IkReal x942=((1.0)*cj5*npx);
evalcond[0]=(((x936*x938))+((x936*x941))+(((-1.0)*x939)));
evalcond[1]=(((x936*x940))+(((-1.0)*x936*x942))+(((-1.0)*x937*x939)));
evalcond[2]=((((-1.0)*x942))+(((-1.0)*x937*x938))+(((-1.0)*x937*x941))+x940);
evalcond[3]=(((npz*x936))+(((-1.0)*x941))+((x937*x940))+(((-1.0)*x937*x942))+(((-1.0)*x938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x66=((1.0)*sj5);
IkReal x67=((1.0)*sj4);
IkReal x68=((1.0)*cj3);
IkReal x69=((((-1.0)*r01*x66))+((cj5*r00)));
IkReal x70=(((r00*sj5))+((cj5*r01)));
IkReal x71=(((cj5*r10))+(((-1.0)*r11*x66)));
IkReal x72=(((cj5*r11))+((r10*sj5)));
IkReal x73=(((cj5*r20))+(((-1.0)*r21*x66)));
IkReal x74=(((cj5*r21))+((r20*sj5)));
IkReal x75=((((-1.0)*r02*x67))+((cj4*x69)));
IkReal x76=(((cj4*x71))+(((-1.0)*r12*x67)));
IkReal x77=(((cj4*x73))+(((-1.0)*r22*x67)));
new_r00=(((sj4*x69))+((cj4*r02)));
new_r01=(((sj3*x75))+((cj3*x70)));
new_r02=(((sj3*x70))+(((-1.0)*x68*x75)));
new_r10=(((cj4*r12))+((sj4*x71)));
new_r11=(((sj3*x76))+((cj3*x72)));
new_r12=(((sj3*x72))+(((-1.0)*x68*x76)));
new_r20=(((cj4*r22))+((sj4*x73)));
new_r21=(((sj3*x77))+((cj3*x74)));
new_r22=(((sj3*x74))+(((-1.0)*x68*x77)));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=new_r22;
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[3];
IkReal x78=((1.0)*sj5);
IkReal x79=((1.0)*sj4);
IkReal x80=((1.0)*cj3);
IkReal x81=x69;
IkReal x82=x70;
IkReal x83=x71;
IkReal x84=x72;
IkReal x85=x73;
IkReal x86=x74;
IkReal x87=((((-1.0)*r02*x79))+((cj4*x81)));
IkReal x88=(((cj4*x83))+(((-1.0)*r12*x79)));
IkReal x89=((((-1.0)*r22*x79))+((cj4*x85)));
new_r00=(((sj4*x81))+((cj4*r02)));
new_r01=(((cj3*x82))+((sj3*x87)));
new_r02=((((-1.0)*x80*x87))+((sj3*x82)));
new_r10=(((sj4*x83))+((cj4*r12)));
new_r11=(((cj3*x84))+((sj3*x88)));
new_r12=((((-1.0)*x80*x88))+((sj3*x84)));
new_r20=(((cj4*r22))+((sj4*x85)));
new_r21=(((cj3*x86))+((sj3*x89)));
new_r22=((((-1.0)*x80*x89))+((sj3*x86)));
IkReal x90=(cj3*sj4);
IkReal x91=((1.0)*sj5);
IkReal x92=(cj3*cj4);
IkReal x93=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r10*sj3*x91))+(((-1.0)*r11*sj3*x93))+((cj5*r10*x92))+(((-1.0)*r11*x91*x92))+(((-1.0)*r12*x90)))))+(IKabs((((cj5*r01*sj3))+((r01*sj5*x92))+(((-1.0)*r00*x92*x93))+((r00*sj3*sj5))+((r02*x90))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x94=((1.0)*sj5);
IkReal x95=((1.0)*sj4);
IkReal x96=((1.0)*cj3);
IkReal x97=x69;
IkReal x98=x70;
IkReal x99=x71;
IkReal x100=x72;
IkReal x101=x73;
IkReal x102=x74;
IkReal x103=(((cj4*x97))+(((-1.0)*r02*x95)));
IkReal x104=((((-1.0)*r12*x95))+((cj4*x99)));
IkReal x105=((((-1.0)*r22*x95))+((cj4*x101)));
new_r00=(((sj4*x97))+((cj4*r02)));
new_r01=(((sj3*x103))+((cj3*x98)));
new_r02=(((sj3*x98))+(((-1.0)*x103*x96)));
new_r10=(((sj4*x99))+((cj4*r12)));
new_r11=(((cj3*x100))+((sj3*x104)));
new_r12=(((sj3*x100))+(((-1.0)*x104*x96)));
new_r20=(((cj4*r22))+((sj4*x101)));
new_r21=(((cj3*x102))+((sj3*x105)));
new_r22=(((sj3*x102))+(((-1.0)*x105*x96)));
IkReal x106=((1.0)*cj5);
IkReal x107=(cj4*sj3);
IkReal x108=(r21*sj5);
j2eval[0]=cj1;
j2eval[1]=IKsign(cj1);
j2eval[2]=((IKabs((((x107*x108))+((r22*sj3*sj4))+(((-1.0)*r20*x106*x107))+(((-1.0)*cj3*r20*sj5))+(((-1.0)*cj3*r21*x106)))))+(IKabs((((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*sj4*x108))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x109=((1.0)*sj5);
IkReal x110=((1.0)*sj4);
IkReal x111=((1.0)*cj3);
IkReal x112=x69;
IkReal x113=x70;
IkReal x114=x71;
IkReal x115=x72;
IkReal x116=x73;
IkReal x117=x74;
IkReal x118=((((-1.0)*r02*x110))+((cj4*x112)));
IkReal x119=((((-1.0)*r12*x110))+((cj4*x114)));
IkReal x120=((((-1.0)*r22*x110))+((cj4*x116)));
new_r00=(((sj4*x112))+((cj4*r02)));
new_r01=(((cj3*x113))+((sj3*x118)));
new_r02=((((-1.0)*x111*x118))+((sj3*x113)));
new_r10=(((sj4*x114))+((cj4*r12)));
new_r11=(((cj3*x115))+((sj3*x119)));
new_r12=((((-1.0)*x111*x119))+((sj3*x115)));
new_r20=(((cj4*r22))+((sj4*x116)));
new_r21=(((cj3*x117))+((sj3*x120)));
new_r22=(((sj3*x117))+(((-1.0)*x111*x120)));
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x121=((1.0)*sj5);
IkReal x122=((1.0)*sj4);
IkReal x123=((1.0)*cj3);
IkReal x124=x69;
IkReal x125=x70;
IkReal x126=x71;
IkReal x127=x72;
IkReal x128=x73;
IkReal x129=x74;
IkReal x130=((((-1.0)*r02*x122))+((cj4*x124)));
IkReal x131=((((-1.0)*r12*x122))+((cj4*x126)));
IkReal x132=((((-1.0)*r22*x122))+((cj4*x128)));
sj1=1.0;
cj1=0;
j1=1.5707963267949;
new_r00=(((sj4*x124))+((cj4*r02)));
new_r01=(((sj3*x130))+((cj3*x125)));
new_r02=((((-1.0)*x123*x130))+((sj3*x125)));
new_r10=(((sj4*x126))+((cj4*r12)));
new_r11=(((sj3*x131))+((cj3*x127)));
new_r12=((((-1.0)*x123*x131))+((sj3*x127)));
new_r20=(((cj4*r22))+((sj4*x128)));
new_r21=(((sj3*x132))+((cj3*x129)));
new_r22=((((-1.0)*x123*x132))+((sj3*x129)));
IkReal x133=(cj3*sj4);
IkReal x134=(cj5*sj3);
IkReal x135=(cj3*cj4);
IkReal x136=((1.0)*cj5);
IkReal x137=(sj3*sj5);
j0eval[0]=((IKabs((((r02*x133))+((r00*x137))+((r01*x134))+(((-1.0)*r00*x135*x136))+((r01*sj5*x135)))))+(IKabs((((r11*sj5*x135))+((r12*x133))+((r11*x134))+((r10*x137))+(((-1.0)*r10*x135*x136))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x138=((1.0)*sj5);
IkReal x139=((1.0)*sj4);
IkReal x140=((1.0)*cj3);
IkReal x141=x69;
IkReal x142=x70;
IkReal x143=x71;
IkReal x144=x72;
IkReal x145=x73;
IkReal x146=x74;
IkReal x147=((((-1.0)*r02*x139))+((cj4*x141)));
IkReal x148=((((-1.0)*r12*x139))+((cj4*x143)));
IkReal x149=((((-1.0)*r22*x139))+((cj4*x145)));
sj1=1.0;
cj1=0;
j1=1.5707963267949;
new_r00=(((sj4*x141))+((cj4*r02)));
new_r01=(((cj3*x142))+((sj3*x147)));
new_r02=((((-1.0)*x140*x147))+((sj3*x142)));
new_r10=(((sj4*x143))+((cj4*r12)));
new_r11=(((cj3*x144))+((sj3*x148)));
new_r12=((((-1.0)*x140*x148))+((sj3*x144)));
new_r20=(((cj4*r22))+((sj4*x145)));
new_r21=(((cj3*x146))+((sj3*x149)));
new_r22=((((-1.0)*x140*x149))+((sj3*x146)));
IkReal x150=(sj3*sj5);
IkReal x151=(cj3*cj4);
IkReal x152=(cj3*sj4);
IkReal x153=(cj5*sj3);
IkReal x154=((1.0)*r01);
j0eval[0]=((IKabs(((((-1.0)*r02*x152))+(((-1.0)*x153*x154))+(((-1.0)*r00*x150))+((cj5*r00*x151))+(((-1.0)*sj5*x151*x154)))))+(IKabs((((r11*sj5*x151))+((r11*x153))+((r10*x150))+(((-1.0)*cj5*r10*x151))+((r12*x152))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j2]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x156 = IKatan2WithCheck(IkReal(new_r12),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x156.valid){
continue;
}
IkReal x155=x156.value;
j0array[0]=((-1.0)*x155);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x155)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=(((new_r02*(IKcos(j0))))+((new_r12*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x157=((1.0)*cj0);
if( IKabs((((new_r01*sj0))+(((-1.0)*new_r00*x157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*sj0))+(((-1.0)*new_r01*x157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*sj0))+(((-1.0)*new_r00*x157))))+IKsqr(((((-1.0)*new_r00*sj0))+(((-1.0)*new_r01*x157))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((new_r01*sj0))+(((-1.0)*new_r00*x157))), ((((-1.0)*new_r00*sj0))+(((-1.0)*new_r01*x157))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x158=IKsin(j2);
IkReal x159=IKcos(j2);
IkReal x160=((1.0)*sj0);
IkReal x161=(sj0*x159);
IkReal x162=(cj0*x158);
IkReal x163=((1.0)*x159);
IkReal x164=(x162+x161);
evalcond[0]=(((new_r10*sj0))+x158+((cj0*new_r00)));
evalcond[1]=(((new_r11*sj0))+x159+((cj0*new_r01)));
evalcond[2]=(x158+((cj0*new_r11))+(((-1.0)*new_r01*x160)));
evalcond[3]=(x164+new_r00);
evalcond[4]=(x164+new_r11);
evalcond[5]=((((-1.0)*x158*x160))+((cj0*x159))+new_r01);
evalcond[6]=((((-1.0)*cj0*x163))+((sj0*x158))+new_r10);
evalcond[7]=((((-1.0)*new_r00*x160))+(((-1.0)*x163))+((cj0*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x166 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x166.valid){
continue;
}
IkReal x165=x166.value;
j0array[0]=((-1.0)*x165);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x165)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j0))))+((new_r12*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x167=((1.0)*cj0);
if( IKabs(((((-1.0)*new_r00*x167))+((new_r01*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*sj0))+(((-1.0)*new_r01*x167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x167))+((new_r01*sj0))))+IKsqr(((((-1.0)*new_r00*sj0))+(((-1.0)*new_r01*x167))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*new_r00*x167))+((new_r01*sj0))), ((((-1.0)*new_r00*sj0))+(((-1.0)*new_r01*x167))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x168=IKsin(j2);
IkReal x169=IKcos(j2);
IkReal x170=((1.0)*sj0);
IkReal x171=(sj0*x169);
IkReal x172=(cj0*x168);
IkReal x173=((1.0)*x169);
IkReal x174=(x171+x172);
evalcond[0]=(((new_r10*sj0))+x168+((cj0*new_r00)));
evalcond[1]=(((new_r11*sj0))+x169+((cj0*new_r01)));
evalcond[2]=(x168+(((-1.0)*new_r01*x170))+((cj0*new_r11)));
evalcond[3]=(x174+new_r00);
evalcond[4]=(x174+new_r11);
evalcond[5]=(((cj0*x169))+(((-1.0)*x168*x170))+new_r01);
evalcond[6]=(((sj0*x168))+(((-1.0)*cj0*x173))+new_r10);
evalcond[7]=((((-1.0)*x173))+((cj0*new_r10))+(((-1.0)*new_r00*x170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x175=((1.0)*sj5);
IkReal x176=((1.0)*sj4);
IkReal x177=((1.0)*cj3);
IkReal x178=x69;
IkReal x179=x70;
IkReal x180=x71;
IkReal x181=x72;
IkReal x182=x73;
IkReal x183=x74;
IkReal x184=(((cj4*x178))+(((-1.0)*r02*x176)));
IkReal x185=((((-1.0)*r12*x176))+((cj4*x180)));
IkReal x186=((((-1.0)*r22*x176))+((cj4*x182)));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
new_r00=(((sj4*x178))+((cj4*r02)));
new_r01=(((sj3*x184))+((cj3*x179)));
new_r02=((((-1.0)*x177*x184))+((sj3*x179)));
new_r10=(((sj4*x180))+((cj4*r12)));
new_r11=(((sj3*x185))+((cj3*x181)));
new_r12=(((sj3*x181))+(((-1.0)*x177*x185)));
new_r20=(((cj4*r22))+((sj4*x182)));
new_r21=(((sj3*x186))+((cj3*x183)));
new_r22=(((sj3*x183))+(((-1.0)*x177*x186)));
IkReal x187=(cj3*sj4);
IkReal x188=(cj5*sj3);
IkReal x189=(cj3*cj4);
IkReal x190=((1.0)*cj5);
IkReal x191=(sj3*sj5);
j0eval[0]=((IKabs(((((-1.0)*r10*x189*x190))+((r12*x187))+((r10*x191))+((r11*sj5*x189))+((r11*x188)))))+(IKabs((((r01*x188))+((r00*x191))+((r02*x187))+((r01*sj5*x189))+(((-1.0)*r00*x189*x190))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x192=((1.0)*sj5);
IkReal x193=((1.0)*sj4);
IkReal x194=((1.0)*cj3);
IkReal x195=x69;
IkReal x196=x70;
IkReal x197=x71;
IkReal x198=x72;
IkReal x199=x73;
IkReal x200=x74;
IkReal x201=(((cj4*x195))+(((-1.0)*r02*x193)));
IkReal x202=(((cj4*x197))+(((-1.0)*r12*x193)));
IkReal x203=(((cj4*x199))+(((-1.0)*r22*x193)));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
new_r00=(((sj4*x195))+((cj4*r02)));
new_r01=(((sj3*x201))+((cj3*x196)));
new_r02=(((sj3*x196))+(((-1.0)*x194*x201)));
new_r10=(((sj4*x197))+((cj4*r12)));
new_r11=(((sj3*x202))+((cj3*x198)));
new_r12=(((sj3*x198))+(((-1.0)*x194*x202)));
new_r20=(((cj4*r22))+((sj4*x199)));
new_r21=(((sj3*x203))+((cj3*x200)));
new_r22=(((sj3*x200))+(((-1.0)*x194*x203)));
IkReal x204=(sj3*sj5);
IkReal x205=(cj3*cj4);
IkReal x206=(cj3*sj4);
IkReal x207=(cj5*sj3);
IkReal x208=((1.0)*r01);
j0eval[0]=((IKabs((((r11*x207))+((r10*x204))+(((-1.0)*cj5*r10*x205))+((r11*sj5*x205))+((r12*x206)))))+(IKabs(((((-1.0)*sj5*x205*x208))+((cj5*r00*x205))+(((-1.0)*r00*x204))+(((-1.0)*x207*x208))+(((-1.0)*r02*x206))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j2]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x210 = IKatan2WithCheck(IkReal(new_r12),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x210.valid){
continue;
}
IkReal x209=x210.value;
j0array[0]=((-1.0)*x209);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x209)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=(((new_r02*(IKcos(j0))))+((new_r12*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x211=((1.0)*cj0);
if( IKabs(((((-1.0)*new_r01*sj0))+(((-1.0)*new_r00*x211)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r00*sj0))+(((-1.0)*new_r01*x211)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*sj0))+(((-1.0)*new_r00*x211))))+IKsqr((((new_r00*sj0))+(((-1.0)*new_r01*x211))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*new_r01*sj0))+(((-1.0)*new_r00*x211))), (((new_r00*sj0))+(((-1.0)*new_r01*x211))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x212=IKcos(j2);
IkReal x213=IKsin(j2);
IkReal x214=((1.0)*sj0);
IkReal x215=(sj0*x213);
IkReal x216=(cj0*x212);
IkReal x217=(cj0*x213);
IkReal x218=(x215+x216);
evalcond[0]=(((new_r10*sj0))+x213+((cj0*new_r00)));
evalcond[1]=(((new_r11*sj0))+x212+((cj0*new_r01)));
evalcond[2]=(x212+(((-1.0)*new_r00*x214))+((cj0*new_r10)));
evalcond[3]=(x218+new_r01);
evalcond[4]=(x218+new_r10);
evalcond[5]=(x217+new_r00+(((-1.0)*x212*x214)));
evalcond[6]=(((sj0*x212))+(((-1.0)*x217))+new_r11);
evalcond[7]=((((-1.0)*x213))+(((-1.0)*new_r01*x214))+((cj0*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x220 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x220.valid){
continue;
}
IkReal x219=x220.value;
j0array[0]=((-1.0)*x219);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x219)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j0))))+((new_r12*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x221=((1.0)*cj0);
if( IKabs(((((-1.0)*new_r01*sj0))+(((-1.0)*new_r00*x221)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x221))+((new_r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*sj0))+(((-1.0)*new_r00*x221))))+IKsqr(((((-1.0)*new_r01*x221))+((new_r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*new_r01*sj0))+(((-1.0)*new_r00*x221))), ((((-1.0)*new_r01*x221))+((new_r00*sj0))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x222=IKcos(j2);
IkReal x223=IKsin(j2);
IkReal x224=((1.0)*sj0);
IkReal x225=(sj0*x223);
IkReal x226=(cj0*x222);
IkReal x227=(cj0*x223);
IkReal x228=(x225+x226);
evalcond[0]=(((new_r10*sj0))+x223+((cj0*new_r00)));
evalcond[1]=(((new_r11*sj0))+x222+((cj0*new_r01)));
evalcond[2]=(x222+((cj0*new_r10))+(((-1.0)*new_r00*x224)));
evalcond[3]=(x228+new_r01);
evalcond[4]=(x228+new_r10);
evalcond[5]=((((-1.0)*x222*x224))+x227+new_r00);
evalcond[6]=(((sj0*x222))+new_r11+(((-1.0)*x227)));
evalcond[7]=((((-1.0)*new_r01*x224))+((cj0*new_r11))+(((-1.0)*x223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x230=IKPowWithIntegerCheck(cj1,-1);
if(!x230.valid){
continue;
}
IkReal x229=x230.value;
CheckValue<IkReal> x231=IKPowWithIntegerCheck(new_r02,-1);
if(!x231.valid){
continue;
}
CheckValue<IkReal> x232=IKPowWithIntegerCheck(x229,-2);
if(!x232.valid){
continue;
}
if( IKabs((x229*(x231.value)*(((x232.value)+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x229)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x229*(x231.value)*(((x232.value)+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x229))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x229*(x231.value)*(((x232.value)+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x229));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x233=IKcos(j0);
IkReal x234=IKsin(j0);
IkReal x235=((1.0)*sj1);
IkReal x236=(cj1*x233);
IkReal x237=(new_r12*x233);
IkReal x238=((1.0)*cj1*x234);
IkReal x239=((1.0)*new_r02*x234);
evalcond[0]=(x236+new_r12);
evalcond[1]=((((-1.0)*x238))+new_r02);
evalcond[2]=(((new_r02*x233))+((new_r12*x234)));
evalcond[3]=(cj1+(((-1.0)*x239))+x237);
evalcond[4]=(((sj1*x237))+((cj1*new_r22))+(((-1.0)*new_r02*x234*x235)));
evalcond[5]=(((new_r10*x236))+(((-1.0)*new_r20*x235))+(((-1.0)*new_r00*x238)));
evalcond[6]=((((-1.0)*new_r21*x235))+((new_r11*x236))+(((-1.0)*new_r01*x238)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x235))+(((-1.0)*new_r02*x238))+((new_r12*x236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
IkReal x240=((1.0)*sj5);
IkReal x241=((1.0)*sj4);
IkReal x242=((1.0)*cj3);
IkReal x243=x69;
IkReal x244=x70;
IkReal x245=x71;
IkReal x246=x72;
IkReal x247=x73;
IkReal x248=x74;
IkReal x249=(((cj4*x243))+(((-1.0)*r02*x241)));
IkReal x250=(((cj4*x245))+(((-1.0)*r12*x241)));
IkReal x251=(((cj4*x247))+(((-1.0)*r22*x241)));
new_r00=(((sj4*x243))+((cj4*r02)));
new_r01=(((sj3*x249))+((cj3*x244)));
new_r02=((((-1.0)*x242*x249))+((sj3*x244)));
new_r10=(((sj4*x245))+((cj4*r12)));
new_r11=(((sj3*x250))+((cj3*x246)));
new_r12=((((-1.0)*x242*x250))+((sj3*x246)));
new_r20=(((cj4*r22))+((sj4*x247)));
new_r21=(((sj3*x251))+((cj3*x248)));
new_r22=((((-1.0)*x242*x251))+((sj3*x248)));
IkReal x252=((1.0)*cj5);
IkReal x253=(cj4*sj3);
IkReal x254=(r21*sj5);
j2eval[0]=cj1;
j2eval[1]=IKsign(cj1);
j2eval[2]=((IKabs(((((-1.0)*cj3*r21*x252))+((r22*sj3*sj4))+((x253*x254))+(((-1.0)*r20*x252*x253))+(((-1.0)*cj3*r20*sj5)))))+(IKabs((((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*sj4*x254))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
IkReal x255=((1.0)*sj5);
IkReal x256=((1.0)*sj4);
IkReal x257=((1.0)*cj3);
IkReal x258=x69;
IkReal x259=x70;
IkReal x260=x71;
IkReal x261=x72;
IkReal x262=x73;
IkReal x263=x74;
IkReal x264=((((-1.0)*r02*x256))+((cj4*x258)));
IkReal x265=(((cj4*x260))+(((-1.0)*r12*x256)));
IkReal x266=((((-1.0)*r22*x256))+((cj4*x262)));
new_r00=(((sj4*x258))+((cj4*r02)));
new_r01=(((cj3*x259))+((sj3*x264)));
new_r02=(((sj3*x259))+(((-1.0)*x257*x264)));
new_r10=(((sj4*x260))+((cj4*r12)));
new_r11=(((sj3*x265))+((cj3*x261)));
new_r12=(((sj3*x261))+(((-1.0)*x257*x265)));
new_r20=(((cj4*r22))+((sj4*x262)));
new_r21=(((sj3*x266))+((cj3*x263)));
new_r22=(((sj3*x263))+(((-1.0)*x257*x266)));
j2eval[0]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x267=((1.0)*sj5);
IkReal x268=((1.0)*sj4);
IkReal x269=((1.0)*cj3);
IkReal x270=x69;
IkReal x271=x70;
IkReal x272=x71;
IkReal x273=x72;
IkReal x274=x73;
IkReal x275=x74;
IkReal x276=(((cj4*x270))+(((-1.0)*r02*x268)));
IkReal x277=(((cj4*x272))+(((-1.0)*r12*x268)));
IkReal x278=(((cj4*x274))+(((-1.0)*r22*x268)));
new_r00=(((sj4*x270))+((cj4*r02)));
new_r01=(((sj3*x276))+((cj3*x271)));
new_r02=(((sj3*x271))+(((-1.0)*x269*x276)));
new_r10=(((sj4*x272))+((cj4*r12)));
new_r11=(((sj3*x277))+((cj3*x273)));
new_r12=(((sj3*x273))+(((-1.0)*x269*x277)));
new_r20=(((cj4*r22))+((sj4*x274)));
new_r21=(((sj3*x278))+((cj3*x275)));
new_r22=(((sj3*x275))+(((-1.0)*x269*x278)));
j2eval[0]=cj1;
j2eval[1]=sj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[10];
bool bgotonextstatement = true;
do
{
IkReal x279=(new_r12*sj0);
IkReal x280=(cj0*new_r02);
IkReal x281=((((-1.0)*new_r02*sj0))+((cj0*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
evalcond[5]=new_r20;
evalcond[6]=(x279+x280);
evalcond[7]=((((-1.0)*x279))+(((-1.0)*x280)));
evalcond[8]=x281;
evalcond[9]=x281;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x282=((1.0)*cj0);
if( IKabs((((new_r01*sj0))+(((-1.0)*new_r00*x282)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x282))+(((-1.0)*new_r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*sj0))+(((-1.0)*new_r00*x282))))+IKsqr(((((-1.0)*new_r01*x282))+(((-1.0)*new_r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((new_r01*sj0))+(((-1.0)*new_r00*x282))), ((((-1.0)*new_r01*x282))+(((-1.0)*new_r00*sj0))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x283=IKsin(j2);
IkReal x284=IKcos(j2);
IkReal x285=((1.0)*sj0);
IkReal x286=(sj0*x284);
IkReal x287=(cj0*x283);
IkReal x288=((1.0)*x284);
IkReal x289=(x287+x286);
evalcond[0]=(((new_r10*sj0))+x283+((cj0*new_r00)));
evalcond[1]=(((new_r11*sj0))+x284+((cj0*new_r01)));
evalcond[2]=(x283+(((-1.0)*new_r01*x285))+((cj0*new_r11)));
evalcond[3]=(x289+new_r00);
evalcond[4]=(x289+new_r11);
evalcond[5]=(((cj0*x284))+new_r01+(((-1.0)*x283*x285)));
evalcond[6]=((((-1.0)*cj0*x288))+((sj0*x283))+new_r10);
evalcond[7]=((((-1.0)*new_r00*x285))+(((-1.0)*x288))+((cj0*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x290=(new_r12*sj0);
IkReal x291=(new_r02*sj0);
IkReal x292=((1.0)*cj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
evalcond[5]=new_r20;
evalcond[6]=(x290+((cj0*new_r02)));
evalcond[7]=((((-1.0)*x290))+(((-1.0)*new_r02*x292)));
evalcond[8]=((((-1.0)*x291))+((cj0*new_r12)));
evalcond[9]=((((-1.0)*new_r12*x292))+x291);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x293=((1.0)*cj0);
if( IKabs(((((-1.0)*new_r01*sj0))+(((-1.0)*new_r00*x293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x293))+((new_r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*sj0))+(((-1.0)*new_r00*x293))))+IKsqr(((((-1.0)*new_r01*x293))+((new_r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*new_r01*sj0))+(((-1.0)*new_r00*x293))), ((((-1.0)*new_r01*x293))+((new_r00*sj0))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x294=IKcos(j2);
IkReal x295=IKsin(j2);
IkReal x296=((1.0)*sj0);
IkReal x297=(sj0*x295);
IkReal x298=(cj0*x294);
IkReal x299=(cj0*x295);
IkReal x300=(x298+x297);
evalcond[0]=(((new_r10*sj0))+x295+((cj0*new_r00)));
evalcond[1]=(((new_r11*sj0))+x294+((cj0*new_r01)));
evalcond[2]=(x294+((cj0*new_r10))+(((-1.0)*new_r00*x296)));
evalcond[3]=(x300+new_r01);
evalcond[4]=(x300+new_r10);
evalcond[5]=(x299+new_r00+(((-1.0)*x294*x296)));
evalcond[6]=((((-1.0)*x299))+((sj0*x294))+new_r11);
evalcond[7]=((((-1.0)*x295))+(((-1.0)*new_r01*x296))+((cj0*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x301=((((-1.0)*sj1))+new_r22);
IkReal x302=(cj1+new_r12);
IkReal x303=((1.0)*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=x301;
evalcond[2]=x301;
evalcond[3]=x302;
evalcond[4]=new_r02;
evalcond[5]=x302;
evalcond[6]=(((new_r12*sj1))+((cj1*new_r22)));
evalcond[7]=(((cj1*new_r10))+(((-1.0)*new_r20*x303)));
evalcond[8]=((((-1.0)*new_r21*x303))+((cj1*new_r11)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x303))+((cj1*new_r12)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x304=IKcos(j2);
IkReal x305=IKsin(j2);
IkReal x306=((1.0)*new_r12);
IkReal x307=((1.0)*x304);
evalcond[0]=(x305+new_r00);
evalcond[1]=(x304+new_r01);
evalcond[2]=(((new_r12*x304))+new_r20);
evalcond[3]=(((new_r22*x305))+new_r11);
evalcond[4]=((((-1.0)*x305*x306))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x307))+new_r10);
evalcond[6]=((((-1.0)*new_r21*x306))+x305+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*new_r20*x306))+((new_r10*new_r22))+(((-1.0)*x307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x308=((((-1.0)*sj1))+new_r22);
IkReal x309=((1.0)*cj1);
IkReal x310=((1.0)*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=x308;
evalcond[2]=x308;
evalcond[3]=(new_r12+(((-1.0)*x309)));
evalcond[4]=new_r02;
evalcond[5]=(cj1+(((-1.0)*new_r12)));
evalcond[6]=(((cj1*new_r22))+(((-1.0)*new_r12*x310)));
evalcond[7]=((((-1.0)*new_r20*x310))+(((-1.0)*new_r10*x309)));
evalcond[8]=((((-1.0)*new_r21*x310))+(((-1.0)*new_r11*x309)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x310))+(((-1.0)*new_r12*x309)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r00, new_r01);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x311=IKsin(j2);
IkReal x312=IKcos(j2);
IkReal x313=((1.0)*new_r22);
IkReal x314=((1.0)*x312);
evalcond[0]=(((new_r12*x311))+new_r21);
evalcond[1]=(x311+(((-1.0)*new_r00)));
evalcond[2]=(x312+(((-1.0)*new_r01)));
evalcond[3]=(new_r10+((new_r22*x312)));
evalcond[4]=((((-1.0)*new_r12*x314))+new_r20);
evalcond[5]=(new_r11+(((-1.0)*x311*x313)));
evalcond[6]=((((-1.0)*new_r11*x313))+x311+((new_r12*new_r21)));
evalcond[7]=(((new_r12*new_r20))+(((-1.0)*new_r10*x313))+(((-1.0)*x314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x316=IKPowWithIntegerCheck(cj1,-1);
if(!x316.valid){
continue;
}
IkReal x315=x316.value;
CheckValue<IkReal> x317=IKPowWithIntegerCheck(sj0,-1);
if(!x317.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x315)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x315*(x317.value)*((((cj0*new_r21*sj1))+(((-1.0)*cj1*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x315))+IKsqr((x315*(x317.value)*((((cj0*new_r21*sj1))+(((-1.0)*cj1*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r21*x315), (x315*(x317.value)*((((cj0*new_r21*sj1))+(((-1.0)*cj1*new_r11))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x318=IKsin(j2);
IkReal x319=IKcos(j2);
IkReal x320=((1.0)*sj0);
IkReal x321=(cj0*new_r11);
IkReal x322=(cj0*new_r10);
IkReal x323=((1.0)*x319);
IkReal x324=(sj1*x318);
IkReal x325=(sj0*x319);
evalcond[0]=(((cj1*x318))+new_r21);
evalcond[1]=((((-1.0)*cj1*x323))+new_r20);
evalcond[2]=(((new_r10*sj0))+x318+((cj0*new_r00)));
evalcond[3]=(((new_r11*sj0))+x319+((cj0*new_r01)));
evalcond[4]=(((sj1*x325))+((cj0*x318))+new_r00);
evalcond[5]=(x325+((cj0*x324))+new_r11);
evalcond[6]=(x324+x321+(((-1.0)*new_r01*x320)));
evalcond[7]=((((-1.0)*x320*x324))+((cj0*x319))+new_r01);
evalcond[8]=((((-1.0)*cj0*sj1*x323))+((sj0*x318))+new_r10);
evalcond[9]=((((-1.0)*sj1*x323))+x322+(((-1.0)*new_r00*x320)));
evalcond[10]=(((cj1*new_r21))+(((-1.0)*new_r01*sj1*x320))+x318+((sj1*x321)));
evalcond[11]=((((-1.0)*new_r00*sj1*x320))+((cj1*new_r20))+(((-1.0)*x323))+((sj1*x322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x326=IKPowWithIntegerCheck(cj1,-1);
if(!x326.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x326.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*new_r01))+(((-1.0)*new_r11*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x326.value)))+IKsqr(((((-1.0)*cj0*new_r01))+(((-1.0)*new_r11*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r21*(x326.value)), ((((-1.0)*cj0*new_r01))+(((-1.0)*new_r11*sj0))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x327=IKsin(j2);
IkReal x328=IKcos(j2);
IkReal x329=((1.0)*sj0);
IkReal x330=(cj0*new_r11);
IkReal x331=(cj0*new_r10);
IkReal x332=((1.0)*x328);
IkReal x333=(sj1*x327);
IkReal x334=(sj0*x328);
evalcond[0]=(((cj1*x327))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*cj1*x332)));
evalcond[2]=(((new_r10*sj0))+x327+((cj0*new_r00)));
evalcond[3]=(((new_r11*sj0))+x328+((cj0*new_r01)));
evalcond[4]=(((cj0*x327))+new_r00+((sj1*x334)));
evalcond[5]=(x334+((cj0*x333))+new_r11);
evalcond[6]=(x333+x330+(((-1.0)*new_r01*x329)));
evalcond[7]=((((-1.0)*x329*x333))+((cj0*x328))+new_r01);
evalcond[8]=(((sj0*x327))+(((-1.0)*cj0*sj1*x332))+new_r10);
evalcond[9]=(x331+(((-1.0)*new_r00*x329))+(((-1.0)*sj1*x332)));
evalcond[10]=(((cj1*new_r21))+(((-1.0)*new_r01*sj1*x329))+x327+((sj1*x330)));
evalcond[11]=((((-1.0)*new_r00*sj1*x329))+((cj1*new_r20))+(((-1.0)*x332))+((sj1*x331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x335=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x335.valid){
continue;
}
CheckValue<IkReal> x336 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x336.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x335.value)))+(x336.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x337=IKsin(j2);
IkReal x338=IKcos(j2);
IkReal x339=((1.0)*sj0);
IkReal x340=(cj0*new_r11);
IkReal x341=(cj0*new_r10);
IkReal x342=((1.0)*x338);
IkReal x343=(sj1*x337);
IkReal x344=(sj0*x338);
evalcond[0]=(((cj1*x337))+new_r21);
evalcond[1]=((((-1.0)*cj1*x342))+new_r20);
evalcond[2]=(((new_r10*sj0))+x337+((cj0*new_r00)));
evalcond[3]=(((new_r11*sj0))+x338+((cj0*new_r01)));
evalcond[4]=(((sj1*x344))+((cj0*x337))+new_r00);
evalcond[5]=(x344+((cj0*x343))+new_r11);
evalcond[6]=(x343+x340+(((-1.0)*new_r01*x339)));
evalcond[7]=(((cj0*x338))+new_r01+(((-1.0)*x339*x343)));
evalcond[8]=(new_r10+(((-1.0)*cj0*sj1*x342))+((sj0*x337)));
evalcond[9]=(x341+(((-1.0)*new_r00*x339))+(((-1.0)*sj1*x342)));
evalcond[10]=(((cj1*new_r21))+x337+(((-1.0)*new_r01*sj1*x339))+((sj1*x340)));
evalcond[11]=(((cj1*new_r20))+((sj1*x341))+(((-1.0)*x342))+(((-1.0)*new_r00*sj1*x339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x345=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x345.valid){
continue;
}
CheckValue<IkReal> x346 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x346.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x345.value)))+(x346.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=(new_r21+((cj1*(IKsin(j2)))));
evalcond[1]=((((-1.0)*cj1*(IKcos(j2))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
IkReal x347=((1.0)*sj5);
IkReal x348=((1.0)*sj4);
IkReal x349=((1.0)*cj3);
IkReal x350=x69;
IkReal x351=x70;
IkReal x352=x71;
IkReal x353=x72;
IkReal x354=x73;
IkReal x355=x74;
IkReal x356=((((-1.0)*r02*x348))+((cj4*x350)));
IkReal x357=((((-1.0)*r12*x348))+((cj4*x352)));
IkReal x358=((((-1.0)*r22*x348))+((cj4*x354)));
new_r00=(((sj4*x350))+((cj4*r02)));
new_r01=(((cj3*x351))+((sj3*x356)));
new_r02=((((-1.0)*x349*x356))+((sj3*x351)));
new_r10=(((sj4*x352))+((cj4*r12)));
new_r11=(((cj3*x353))+((sj3*x357)));
new_r12=((((-1.0)*x349*x357))+((sj3*x353)));
new_r20=(((sj4*x354))+((cj4*r22)));
new_r21=(((cj3*x355))+((sj3*x358)));
new_r22=((((-1.0)*x349*x358))+((sj3*x355)));
IkReal x359=(cj3*sj4);
IkReal x360=((1.0)*sj5);
IkReal x361=(cj3*cj4);
IkReal x362=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r12*x359))+((cj5*r10*x361))+(((-1.0)*r11*x360*x361))+(((-1.0)*r11*sj3*x362))+(((-1.0)*r10*sj3*x360)))))+(IKabs(((((-1.0)*r00*x361*x362))+((cj5*r01*sj3))+((r01*sj5*x361))+((r00*sj3*sj5))+((r02*x359))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x363=((1.0)*sj5);
IkReal x364=((1.0)*sj4);
IkReal x365=((1.0)*cj3);
IkReal x366=x69;
IkReal x367=x70;
IkReal x368=x71;
IkReal x369=x72;
IkReal x370=x73;
IkReal x371=x74;
IkReal x372=((((-1.0)*r02*x364))+((cj4*x366)));
IkReal x373=(((cj4*x368))+(((-1.0)*r12*x364)));
IkReal x374=(((cj4*x370))+(((-1.0)*r22*x364)));
new_r00=(((sj4*x366))+((cj4*r02)));
new_r01=(((sj3*x372))+((cj3*x367)));
new_r02=(((sj3*x367))+(((-1.0)*x365*x372)));
new_r10=(((sj4*x368))+((cj4*r12)));
new_r11=(((sj3*x373))+((cj3*x369)));
new_r12=(((sj3*x369))+(((-1.0)*x365*x373)));
new_r20=(((sj4*x370))+((cj4*r22)));
new_r21=(((sj3*x374))+((cj3*x371)));
new_r22=(((sj3*x371))+(((-1.0)*x365*x374)));
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x375=((1.0)*sj5);
IkReal x376=((1.0)*sj4);
IkReal x377=((1.0)*cj3);
IkReal x378=x69;
IkReal x379=x70;
IkReal x380=x71;
IkReal x381=x72;
IkReal x382=x73;
IkReal x383=x74;
IkReal x384=((((-1.0)*r02*x376))+((cj4*x378)));
IkReal x385=((((-1.0)*r12*x376))+((cj4*x380)));
IkReal x386=(((cj4*x382))+(((-1.0)*r22*x376)));
new_r00=(((sj4*x378))+((cj4*r02)));
new_r01=(((cj3*x379))+((sj3*x384)));
new_r02=(((sj3*x379))+(((-1.0)*x377*x384)));
new_r10=(((sj4*x380))+((cj4*r12)));
new_r11=(((cj3*x381))+((sj3*x385)));
new_r12=((((-1.0)*x377*x385))+((sj3*x381)));
new_r20=(((cj4*r22))+((sj4*x382)));
new_r21=(((cj3*x383))+((sj3*x386)));
new_r22=((((-1.0)*x377*x386))+((sj3*x383)));
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x387=((1.0)*sj5);
IkReal x388=((1.0)*sj4);
IkReal x389=((1.0)*cj3);
IkReal x390=x69;
IkReal x391=x70;
IkReal x392=x71;
IkReal x393=x72;
IkReal x394=x73;
IkReal x395=x74;
IkReal x396=(((cj4*x390))+(((-1.0)*r02*x388)));
IkReal x397=(((cj4*x392))+(((-1.0)*r12*x388)));
IkReal x398=((((-1.0)*r22*x388))+((cj4*x394)));
sj1=1.0;
cj1=0;
j1=1.5707963267949;
new_r00=(((sj4*x390))+((cj4*r02)));
new_r01=(((sj3*x396))+((cj3*x391)));
new_r02=((((-1.0)*x389*x396))+((sj3*x391)));
new_r10=(((cj4*r12))+((sj4*x392)));
new_r11=(((sj3*x397))+((cj3*x393)));
new_r12=((((-1.0)*x389*x397))+((sj3*x393)));
new_r20=(((cj4*r22))+((sj4*x394)));
new_r21=(((sj3*x398))+((cj3*x395)));
new_r22=((((-1.0)*x389*x398))+((sj3*x395)));
IkReal x399=(cj3*sj2);
IkReal x400=(sj2*sj3);
IkReal x401=(cj4*sj5);
IkReal x402=((1.0)*cj4*cj5);
j0eval[0]=((IKabs((((r10*sj5*x400))+((r11*x399*x401))+(((-1.0)*r10*x399*x402))+((r12*sj4*x399))+((cj5*r11*x400)))))+(IKabs((((r00*sj5*x400))+((r01*x399*x401))+((r02*sj4*x399))+(((-1.0)*r00*x399*x402))+((cj5*r01*x400))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x403=((1.0)*sj5);
IkReal x404=((1.0)*sj4);
IkReal x405=((1.0)*cj3);
IkReal x406=x69;
IkReal x407=x70;
IkReal x408=x71;
IkReal x409=x72;
IkReal x410=x73;
IkReal x411=x74;
IkReal x412=((((-1.0)*r02*x404))+((cj4*x406)));
IkReal x413=(((cj4*x408))+(((-1.0)*r12*x404)));
IkReal x414=(((cj4*x410))+(((-1.0)*r22*x404)));
sj1=1.0;
cj1=0;
j1=1.5707963267949;
new_r00=(((sj4*x406))+((cj4*r02)));
new_r01=(((sj3*x412))+((cj3*x407)));
new_r02=(((sj3*x407))+(((-1.0)*x405*x412)));
new_r10=(((sj4*x408))+((cj4*r12)));
new_r11=(((sj3*x413))+((cj3*x409)));
new_r12=(((sj3*x409))+(((-1.0)*x405*x413)));
new_r20=(((cj4*r22))+((sj4*x410)));
new_r21=(((sj3*x414))+((cj3*x411)));
new_r22=(((sj3*x411))+(((-1.0)*x405*x414)));
IkReal x415=(cj2*cj3);
IkReal x416=(cj4*sj5);
IkReal x417=(cj2*cj5*sj3);
IkReal x418=((1.0)*cj4*cj5);
IkReal x419=(cj2*sj3*sj5);
j0eval[0]=((IKabs(((((-1.0)*r00*x415*x418))+((r01*x417))+((r01*x415*x416))+((r00*x419))+((r02*sj4*x415)))))+(IKabs((((r11*x417))+((r10*x419))+((r11*x415*x416))+((r12*sj4*x415))+(((-1.0)*r10*x415*x418))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x420 = IKatan2WithCheck(IkReal((new_r00*new_r02)),((-1.0)*new_r00*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x420.valid){
continue;
}
CheckValue<IkReal> x421=IKPowWithIntegerCheck(IKsign((((new_r12*sj2))+(((-1.0)*cj2*new_r02)))),-1);
if(!x421.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x420.value)+(((1.5707963267949)*(x421.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x422=IKcos(j0);
IkReal x423=IKsin(j0);
IkReal x424=((1.0)*cj2);
IkReal x425=(sj2*x422);
IkReal x426=(cj2*x423);
IkReal x427=(sj2*x423);
IkReal x428=((1.0)*x423);
IkReal x429=(x426+x425);
evalcond[0]=(((new_r12*x423))+((new_r02*x422)));
evalcond[1]=(sj2+((new_r10*x423))+((new_r00*x422)));
evalcond[2]=(cj2+((new_r11*x423))+((new_r01*x422)));
evalcond[3]=(((new_r12*x422))+(((-1.0)*new_r02*x428)));
evalcond[4]=(x429+new_r00);
evalcond[5]=(x429+new_r11);
evalcond[6]=(sj2+((new_r11*x422))+(((-1.0)*new_r01*x428)));
evalcond[7]=((((-1.0)*x427))+((cj2*x422))+new_r01);
evalcond[8]=((((-1.0)*x422*x424))+x427+new_r10);
evalcond[9]=((((-1.0)*new_r00*x428))+(((-1.0)*x424))+((new_r10*x422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x430=IKPowWithIntegerCheck(IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)))),-1);
if(!x430.valid){
continue;
}
CheckValue<IkReal> x431 = IKatan2WithCheck(IkReal((cj2*new_r02)),((-1.0)*cj2*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x431.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x430.value)))+(x431.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x432=IKcos(j0);
IkReal x433=IKsin(j0);
IkReal x434=((1.0)*cj2);
IkReal x435=(sj2*x432);
IkReal x436=(cj2*x433);
IkReal x437=(sj2*x433);
IkReal x438=((1.0)*x433);
IkReal x439=(x435+x436);
evalcond[0]=(((new_r12*x433))+((new_r02*x432)));
evalcond[1]=(((new_r00*x432))+sj2+((new_r10*x433)));
evalcond[2]=(((new_r01*x432))+cj2+((new_r11*x433)));
evalcond[3]=(((new_r12*x432))+(((-1.0)*new_r02*x438)));
evalcond[4]=(x439+new_r00);
evalcond[5]=(x439+new_r11);
evalcond[6]=(sj2+(((-1.0)*new_r01*x438))+((new_r11*x432)));
evalcond[7]=((((-1.0)*x437))+((cj2*x432))+new_r01);
evalcond[8]=((((-1.0)*x432*x434))+x437+new_r10);
evalcond[9]=((((-1.0)*new_r00*x438))+(((-1.0)*x434))+((new_r10*x432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x440=IKPowWithIntegerCheck(IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)))),-1);
if(!x440.valid){
continue;
}
CheckValue<IkReal> x441 = IKatan2WithCheck(IkReal((new_r02*sj2)),((-1.0)*new_r12*sj2),IKFAST_ATAN2_MAGTHRESH);
if(!x441.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x440.value)))+(x441.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x442=IKcos(j0);
IkReal x443=IKsin(j0);
IkReal x444=((1.0)*cj2);
IkReal x445=(sj2*x442);
IkReal x446=(cj2*x443);
IkReal x447=(sj2*x443);
IkReal x448=((1.0)*x443);
IkReal x449=(x445+x446);
evalcond[0]=(((new_r12*x443))+((new_r02*x442)));
evalcond[1]=(((new_r00*x442))+sj2+((new_r10*x443)));
evalcond[2]=(((new_r01*x442))+cj2+((new_r11*x443)));
evalcond[3]=(((new_r12*x442))+(((-1.0)*new_r02*x448)));
evalcond[4]=(x449+new_r00);
evalcond[5]=(x449+new_r11);
evalcond[6]=(sj2+(((-1.0)*new_r01*x448))+((new_r11*x442)));
evalcond[7]=((((-1.0)*x447))+((cj2*x442))+new_r01);
evalcond[8]=(x447+new_r10+(((-1.0)*x442*x444)));
evalcond[9]=((((-1.0)*x444))+(((-1.0)*new_r00*x448))+((new_r10*x442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x450=((1.0)*sj5);
IkReal x451=((1.0)*sj4);
IkReal x452=((1.0)*cj3);
IkReal x453=x69;
IkReal x454=x70;
IkReal x455=x71;
IkReal x456=x72;
IkReal x457=x73;
IkReal x458=x74;
IkReal x459=(((cj4*x453))+(((-1.0)*r02*x451)));
IkReal x460=(((cj4*x455))+(((-1.0)*r12*x451)));
IkReal x461=(((cj4*x457))+(((-1.0)*r22*x451)));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
new_r00=(((sj4*x453))+((cj4*r02)));
new_r01=(((sj3*x459))+((cj3*x454)));
new_r02=(((sj3*x454))+(((-1.0)*x452*x459)));
new_r10=(((sj4*x455))+((cj4*r12)));
new_r11=(((sj3*x460))+((cj3*x456)));
new_r12=(((sj3*x456))+(((-1.0)*x452*x460)));
new_r20=(((cj4*r22))+((sj4*x457)));
new_r21=(((sj3*x461))+((cj3*x458)));
new_r22=(((sj3*x458))+(((-1.0)*x452*x461)));
IkReal x462=(cj3*sj2);
IkReal x463=(sj2*sj3);
IkReal x464=(cj4*sj5);
IkReal x465=((1.0)*cj4*cj5);
j0eval[0]=((IKabs(((((-1.0)*r10*x462*x465))+((r11*x462*x464))+((cj5*r11*x463))+((r12*sj4*x462))+((r10*sj5*x463)))))+(IKabs(((((-1.0)*r00*x462*x465))+((r01*x462*x464))+((r00*sj5*x463))+((r02*sj4*x462))+((cj5*r01*x463))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x466=((1.0)*sj5);
IkReal x467=((1.0)*sj4);
IkReal x468=((1.0)*cj3);
IkReal x469=x69;
IkReal x470=x70;
IkReal x471=x71;
IkReal x472=x72;
IkReal x473=x73;
IkReal x474=x74;
IkReal x475=(((cj4*x469))+(((-1.0)*r02*x467)));
IkReal x476=(((cj4*x471))+(((-1.0)*r12*x467)));
IkReal x477=(((cj4*x473))+(((-1.0)*r22*x467)));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
new_r00=(((sj4*x469))+((cj4*r02)));
new_r01=(((cj3*x470))+((sj3*x475)));
new_r02=((((-1.0)*x468*x475))+((sj3*x470)));
new_r10=(((sj4*x471))+((cj4*r12)));
new_r11=(((cj3*x472))+((sj3*x476)));
new_r12=((((-1.0)*x468*x476))+((sj3*x472)));
new_r20=(((cj4*r22))+((sj4*x473)));
new_r21=(((cj3*x474))+((sj3*x477)));
new_r22=((((-1.0)*x468*x477))+((sj3*x474)));
IkReal x478=(cj2*cj3);
IkReal x479=(cj4*sj5);
IkReal x480=(cj2*cj5*sj3);
IkReal x481=((1.0)*cj4*cj5);
IkReal x482=(cj2*sj3*sj5);
j0eval[0]=((IKabs((((r11*x478*x479))+(((-1.0)*r10*x478*x481))+((r12*sj4*x478))+((r10*x482))+((r11*x480)))))+(IKabs((((r01*x478*x479))+((r01*x480))+((r00*x482))+(((-1.0)*r00*x478*x481))+((r02*sj4*x478))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x483 = IKatan2WithCheck(IkReal((new_r01*new_r02)),((-1.0)*new_r01*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x483.valid){
continue;
}
CheckValue<IkReal> x484=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r02*sj2))+((cj2*new_r12)))),-1);
if(!x484.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x483.value)+(((1.5707963267949)*(x484.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x485=IKcos(j0);
IkReal x486=IKsin(j0);
IkReal x487=(cj2*x485);
IkReal x488=(sj2*x486);
IkReal x489=(sj2*x485);
IkReal x490=((1.0)*x486);
IkReal x491=(x488+x487);
evalcond[0]=(((new_r02*x485))+((new_r12*x486)));
evalcond[1]=(sj2+((new_r10*x486))+((new_r00*x485)));
evalcond[2]=(cj2+((new_r11*x486))+((new_r01*x485)));
evalcond[3]=((((-1.0)*new_r02*x490))+((new_r12*x485)));
evalcond[4]=(x491+new_r01);
evalcond[5]=(x491+new_r10);
evalcond[6]=((((-1.0)*cj2*x490))+x489+new_r00);
evalcond[7]=(((cj2*x486))+(((-1.0)*x489))+new_r11);
evalcond[8]=((((-1.0)*new_r00*x490))+cj2+((new_r10*x485)));
evalcond[9]=((((-1.0)*sj2))+(((-1.0)*new_r01*x490))+((new_r11*x485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x492=IKPowWithIntegerCheck(IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)))),-1);
if(!x492.valid){
continue;
}
CheckValue<IkReal> x493 = IKatan2WithCheck(IkReal((cj2*new_r02)),((-1.0)*cj2*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x493.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x492.value)))+(x493.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x494=IKcos(j0);
IkReal x495=IKsin(j0);
IkReal x496=(cj2*x494);
IkReal x497=(sj2*x495);
IkReal x498=(sj2*x494);
IkReal x499=((1.0)*x495);
IkReal x500=(x496+x497);
evalcond[0]=(((new_r02*x494))+((new_r12*x495)));
evalcond[1]=(sj2+((new_r10*x495))+((new_r00*x494)));
evalcond[2]=(cj2+((new_r11*x495))+((new_r01*x494)));
evalcond[3]=((((-1.0)*new_r02*x499))+((new_r12*x494)));
evalcond[4]=(x500+new_r01);
evalcond[5]=(x500+new_r10);
evalcond[6]=((((-1.0)*cj2*x499))+x498+new_r00);
evalcond[7]=((((-1.0)*x498))+new_r11+((cj2*x495)));
evalcond[8]=((((-1.0)*new_r00*x499))+cj2+((new_r10*x494)));
evalcond[9]=((((-1.0)*sj2))+(((-1.0)*new_r01*x499))+((new_r11*x494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x501=IKPowWithIntegerCheck(IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)))),-1);
if(!x501.valid){
continue;
}
CheckValue<IkReal> x502 = IKatan2WithCheck(IkReal((new_r02*sj2)),((-1.0)*new_r12*sj2),IKFAST_ATAN2_MAGTHRESH);
if(!x502.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x501.value)))+(x502.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[10];
IkReal x503=IKcos(j0);
IkReal x504=IKsin(j0);
IkReal x505=(cj2*x503);
IkReal x506=(sj2*x504);
IkReal x507=(sj2*x503);
IkReal x508=((1.0)*x504);
IkReal x509=(x505+x506);
evalcond[0]=(((new_r02*x503))+((new_r12*x504)));
evalcond[1]=(sj2+((new_r10*x504))+((new_r00*x503)));
evalcond[2]=(cj2+((new_r11*x504))+((new_r01*x503)));
evalcond[3]=((((-1.0)*new_r02*x508))+((new_r12*x503)));
evalcond[4]=(x509+new_r01);
evalcond[5]=(x509+new_r10);
evalcond[6]=(x507+(((-1.0)*cj2*x508))+new_r00);
evalcond[7]=(((cj2*x504))+new_r11+(((-1.0)*x507)));
evalcond[8]=(cj2+(((-1.0)*new_r00*x508))+((new_r10*x503)));
evalcond[9]=((((-1.0)*new_r01*x508))+(((-1.0)*sj2))+((new_r11*x503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x511=IKPowWithIntegerCheck(cj1,-1);
if(!x511.valid){
continue;
}
IkReal x510=x511.value;
CheckValue<IkReal> x512=IKPowWithIntegerCheck(new_r11,-1);
if(!x512.valid){
continue;
}
if( IKabs((x510*(x512.value)*((((new_r01*new_r12))+(((-1.0)*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x510)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x510*(x512.value)*((((new_r01*new_r12))+(((-1.0)*cj1*cj2))))))+IKsqr(((-1.0)*new_r12*x510))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x510*(x512.value)*((((new_r01*new_r12))+(((-1.0)*cj1*cj2))))), ((-1.0)*new_r12*x510));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[18];
IkReal x513=IKcos(j0);
IkReal x514=IKsin(j0);
IkReal x515=((1.0)*sj1);
IkReal x516=(sj1*sj2);
IkReal x517=(cj1*x513);
IkReal x518=(new_r10*x513);
IkReal x519=(sj2*x514);
IkReal x520=(new_r01*x514);
IkReal x521=(cj2*x513);
IkReal x522=(new_r02*x514);
IkReal x523=(new_r11*x513);
IkReal x524=(new_r12*x513);
IkReal x525=(cj2*x514);
IkReal x526=(new_r00*x514);
IkReal x527=((1.0)*cj1*x514);
evalcond[0]=(x517+new_r12);
evalcond[1]=((((-1.0)*x527))+new_r02);
evalcond[2]=(((new_r02*x513))+((new_r12*x514)));
evalcond[3]=(((new_r00*x513))+((new_r10*x514))+sj2);
evalcond[4]=(((new_r01*x513))+((new_r11*x514))+cj2);
evalcond[5]=(cj1+(((-1.0)*x522))+x524);
evalcond[6]=(((sj1*x525))+((sj2*x513))+new_r00);
evalcond[7]=(((x513*x516))+x525+new_r11);
evalcond[8]=((((-1.0)*x515*x519))+x521+new_r01);
evalcond[9]=((((-1.0)*x515*x521))+x519+new_r10);
evalcond[10]=((((-1.0)*x520))+x523+x516);
evalcond[11]=((((-1.0)*x526))+(((-1.0)*cj2*x515))+x518);
evalcond[12]=(((sj1*x524))+((cj1*new_r22))+(((-1.0)*x515*x522)));
evalcond[13]=(((new_r10*x517))+(((-1.0)*cj1*x526))+(((-1.0)*new_r20*x515)));
evalcond[14]=(((new_r11*x517))+(((-1.0)*cj1*x520))+(((-1.0)*new_r21*x515)));
evalcond[15]=(sj2+((sj1*x523))+((cj1*new_r21))+(((-1.0)*x515*x520)));
evalcond[16]=((1.0)+((new_r12*x517))+(((-1.0)*new_r22*x515))+(((-1.0)*cj1*x522)));
evalcond[17]=(((cj1*new_r20))+(((-1.0)*x515*x526))+((sj1*x518))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x529=IKPowWithIntegerCheck(cj1,-1);
if(!x529.valid){
continue;
}
IkReal x528=x529.value;
CheckValue<IkReal> x530=IKPowWithIntegerCheck(new_r10,-1);
if(!x530.valid){
continue;
}
if( IKabs((x528*(x530.value)*(((((-1.0)*cj1*sj2))+((new_r00*new_r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x528)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x528*(x530.value)*(((((-1.0)*cj1*sj2))+((new_r00*new_r12))))))+IKsqr(((-1.0)*new_r12*x528))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x528*(x530.value)*(((((-1.0)*cj1*sj2))+((new_r00*new_r12))))), ((-1.0)*new_r12*x528));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[18];
IkReal x531=IKcos(j0);
IkReal x532=IKsin(j0);
IkReal x533=((1.0)*sj1);
IkReal x534=(sj1*sj2);
IkReal x535=(cj1*x531);
IkReal x536=(new_r10*x531);
IkReal x537=(sj2*x532);
IkReal x538=(new_r01*x532);
IkReal x539=(cj2*x531);
IkReal x540=(new_r02*x532);
IkReal x541=(new_r11*x531);
IkReal x542=(new_r12*x531);
IkReal x543=(cj2*x532);
IkReal x544=(new_r00*x532);
IkReal x545=((1.0)*cj1*x532);
evalcond[0]=(x535+new_r12);
evalcond[1]=((((-1.0)*x545))+new_r02);
evalcond[2]=(((new_r02*x531))+((new_r12*x532)));
evalcond[3]=(sj2+((new_r10*x532))+((new_r00*x531)));
evalcond[4]=(((new_r01*x531))+cj2+((new_r11*x532)));
evalcond[5]=(cj1+(((-1.0)*x540))+x542);
evalcond[6]=(((sj1*x543))+((sj2*x531))+new_r00);
evalcond[7]=(((x531*x534))+x543+new_r11);
evalcond[8]=((((-1.0)*x533*x537))+x539+new_r01);
evalcond[9]=((((-1.0)*x533*x539))+x537+new_r10);
evalcond[10]=((((-1.0)*x538))+x541+x534);
evalcond[11]=((((-1.0)*x544))+(((-1.0)*cj2*x533))+x536);
evalcond[12]=(((sj1*x542))+((cj1*new_r22))+(((-1.0)*x533*x540)));
evalcond[13]=(((new_r10*x535))+(((-1.0)*new_r20*x533))+(((-1.0)*cj1*x544)));
evalcond[14]=(((new_r11*x535))+(((-1.0)*new_r21*x533))+(((-1.0)*cj1*x538)));
evalcond[15]=(((sj1*x541))+sj2+(((-1.0)*x533*x538))+((cj1*new_r21)));
evalcond[16]=((1.0)+(((-1.0)*new_r22*x533))+((new_r12*x535))+(((-1.0)*cj1*x540)));
evalcond[17]=(((sj1*x536))+((cj1*new_r20))+(((-1.0)*x533*x544))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x546=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x546.valid){
continue;
}
CheckValue<IkReal> x547 = IKatan2WithCheck(IkReal(new_r02),((-1.0)*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x547.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x546.value)))+(x547.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[18];
IkReal x548=IKcos(j0);
IkReal x549=IKsin(j0);
IkReal x550=((1.0)*sj1);
IkReal x551=(sj1*sj2);
IkReal x552=(cj1*x548);
IkReal x553=(new_r10*x548);
IkReal x554=(sj2*x549);
IkReal x555=(new_r01*x549);
IkReal x556=(cj2*x548);
IkReal x557=(new_r02*x549);
IkReal x558=(new_r11*x548);
IkReal x559=(new_r12*x548);
IkReal x560=(cj2*x549);
IkReal x561=(new_r00*x549);
IkReal x562=((1.0)*cj1*x549);
evalcond[0]=(x552+new_r12);
evalcond[1]=(new_r02+(((-1.0)*x562)));
evalcond[2]=(((new_r02*x548))+((new_r12*x549)));
evalcond[3]=(((new_r00*x548))+sj2+((new_r10*x549)));
evalcond[4]=(cj2+((new_r11*x549))+((new_r01*x548)));
evalcond[5]=((((-1.0)*x557))+cj1+x559);
evalcond[6]=(((sj2*x548))+((sj1*x560))+new_r00);
evalcond[7]=(((x548*x551))+x560+new_r11);
evalcond[8]=((((-1.0)*x550*x554))+x556+new_r01);
evalcond[9]=((((-1.0)*x550*x556))+x554+new_r10);
evalcond[10]=((((-1.0)*x555))+x558+x551);
evalcond[11]=((((-1.0)*cj2*x550))+x553+(((-1.0)*x561)));
evalcond[12]=(((sj1*x559))+((cj1*new_r22))+(((-1.0)*x550*x557)));
evalcond[13]=(((new_r10*x552))+(((-1.0)*cj1*x561))+(((-1.0)*new_r20*x550)));
evalcond[14]=(((new_r11*x552))+(((-1.0)*new_r21*x550))+(((-1.0)*cj1*x555)));
evalcond[15]=(((sj1*x558))+sj2+((cj1*new_r21))+(((-1.0)*x550*x555)));
evalcond[16]=((1.0)+(((-1.0)*new_r22*x550))+((new_r12*x552))+(((-1.0)*cj1*x557)));
evalcond[17]=(((sj1*x553))+((cj1*new_r20))+(((-1.0)*x550*x561))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x563=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x563.valid){
continue;
}
CheckValue<IkReal> x564 = IKatan2WithCheck(IkReal(new_r02),((-1.0)*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x564.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x563.value)))+(x564.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x565=IKcos(j0);
IkReal x566=IKsin(j0);
IkReal x567=((1.0)*sj1);
IkReal x568=(cj1*x565);
IkReal x569=(new_r12*x565);
IkReal x570=((1.0)*cj1*x566);
IkReal x571=((1.0)*new_r02*x566);
evalcond[0]=(x568+new_r12);
evalcond[1]=((((-1.0)*x570))+new_r02);
evalcond[2]=(((new_r02*x565))+((new_r12*x566)));
evalcond[3]=(cj1+(((-1.0)*x571))+x569);
evalcond[4]=((((-1.0)*new_r02*x566*x567))+((cj1*new_r22))+((sj1*x569)));
evalcond[5]=((((-1.0)*new_r20*x567))+(((-1.0)*new_r00*x570))+((new_r10*x568)));
evalcond[6]=(((new_r11*x568))+(((-1.0)*new_r01*x570))+(((-1.0)*new_r21*x567)));
evalcond[7]=((1.0)+(((-1.0)*new_r02*x570))+(((-1.0)*new_r22*x567))+((new_r12*x568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
IkReal x572=((1.0)*sj5);
IkReal x573=((1.0)*sj4);
IkReal x574=((1.0)*cj3);
IkReal x575=x69;
IkReal x576=x70;
IkReal x577=x71;
IkReal x578=x72;
IkReal x579=x73;
IkReal x580=x74;
IkReal x581=((((-1.0)*r02*x573))+((cj4*x575)));
IkReal x582=((((-1.0)*r12*x573))+((cj4*x577)));
IkReal x583=((((-1.0)*r22*x573))+((cj4*x579)));
new_r00=(((sj4*x575))+((cj4*r02)));
new_r01=(((sj3*x581))+((cj3*x576)));
new_r02=(((sj3*x576))+(((-1.0)*x574*x581)));
new_r10=(((sj4*x577))+((cj4*r12)));
new_r11=(((sj3*x582))+((cj3*x578)));
new_r12=(((sj3*x578))+(((-1.0)*x574*x582)));
new_r20=(((sj4*x579))+((cj4*r22)));
new_r21=(((sj3*x583))+((cj3*x580)));
new_r22=(((sj3*x580))+(((-1.0)*x574*x583)));
IkReal x584=((1.0)*cj5);
IkReal x585=(cj4*sj3);
IkReal x586=(r21*sj5);
j2eval[0]=cj1;
j2eval[1]=IKsign(cj1);
j2eval[2]=((IKabs((((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*sj4*x586)))))+(IKabs(((((-1.0)*r20*x584*x585))+(((-1.0)*cj3*r21*x584))+((r22*sj3*sj4))+((x585*x586))+(((-1.0)*cj3*r20*sj5))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
IkReal x587=((1.0)*sj5);
IkReal x588=((1.0)*sj4);
IkReal x589=((1.0)*cj3);
IkReal x590=x69;
IkReal x591=x70;
IkReal x592=x71;
IkReal x593=x72;
IkReal x594=x73;
IkReal x595=x74;
IkReal x596=((((-1.0)*r02*x588))+((cj4*x590)));
IkReal x597=((((-1.0)*r12*x588))+((cj4*x592)));
IkReal x598=((((-1.0)*r22*x588))+((cj4*x594)));
new_r00=(((sj4*x590))+((cj4*r02)));
new_r01=(((cj3*x591))+((sj3*x596)));
new_r02=((((-1.0)*x589*x596))+((sj3*x591)));
new_r10=(((sj4*x592))+((cj4*r12)));
new_r11=(((cj3*x593))+((sj3*x597)));
new_r12=((((-1.0)*x589*x597))+((sj3*x593)));
new_r20=(((cj4*r22))+((sj4*x594)));
new_r21=(((cj3*x595))+((sj3*x598)));
new_r22=((((-1.0)*x589*x598))+((sj3*x595)));
j2eval[0]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x599=((1.0)*sj5);
IkReal x600=((1.0)*sj4);
IkReal x601=((1.0)*cj3);
IkReal x602=x69;
IkReal x603=x70;
IkReal x604=x71;
IkReal x605=x72;
IkReal x606=x73;
IkReal x607=x74;
IkReal x608=((((-1.0)*r02*x600))+((cj4*x602)));
IkReal x609=((((-1.0)*r12*x600))+((cj4*x604)));
IkReal x610=((((-1.0)*r22*x600))+((cj4*x606)));
new_r00=(((sj4*x602))+((cj4*r02)));
new_r01=(((cj3*x603))+((sj3*x608)));
new_r02=(((sj3*x603))+(((-1.0)*x601*x608)));
new_r10=(((sj4*x604))+((cj4*r12)));
new_r11=(((cj3*x605))+((sj3*x609)));
new_r12=(((sj3*x605))+(((-1.0)*x601*x609)));
new_r20=(((cj4*r22))+((sj4*x606)));
new_r21=(((cj3*x607))+((sj3*x610)));
new_r22=((((-1.0)*x601*x610))+((sj3*x607)));
j2eval[0]=cj1;
j2eval[1]=sj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[10];
bool bgotonextstatement = true;
do
{
IkReal x611=(new_r12*sj0);
IkReal x612=(cj0*new_r02);
IkReal x613=((((-1.0)*new_r02*sj0))+((cj0*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
evalcond[5]=new_r20;
evalcond[6]=(x611+x612);
evalcond[7]=((((-1.0)*x611))+(((-1.0)*x612)));
evalcond[8]=x613;
evalcond[9]=x613;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x614=((1.0)*cj0);
if( IKabs((((new_r01*sj0))+(((-1.0)*new_r00*x614)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*sj0))+(((-1.0)*new_r01*x614)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*sj0))+(((-1.0)*new_r00*x614))))+IKsqr(((((-1.0)*new_r00*sj0))+(((-1.0)*new_r01*x614))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((new_r01*sj0))+(((-1.0)*new_r00*x614))), ((((-1.0)*new_r00*sj0))+(((-1.0)*new_r01*x614))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x615=IKsin(j2);
IkReal x616=IKcos(j2);
IkReal x617=((1.0)*sj0);
IkReal x618=(sj0*x616);
IkReal x619=(cj0*x615);
IkReal x620=((1.0)*x616);
IkReal x621=(x618+x619);
evalcond[0]=(((new_r10*sj0))+x615+((cj0*new_r00)));
evalcond[1]=(((new_r11*sj0))+x616+((cj0*new_r01)));
evalcond[2]=(x615+((cj0*new_r11))+(((-1.0)*new_r01*x617)));
evalcond[3]=(x621+new_r00);
evalcond[4]=(x621+new_r11);
evalcond[5]=(((cj0*x616))+new_r01+(((-1.0)*x615*x617)));
evalcond[6]=(((sj0*x615))+(((-1.0)*cj0*x620))+new_r10);
evalcond[7]=((((-1.0)*x620))+(((-1.0)*new_r00*x617))+((cj0*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x622=(new_r12*sj0);
IkReal x623=(new_r02*sj0);
IkReal x624=((1.0)*cj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
evalcond[5]=new_r20;
evalcond[6]=(x622+((cj0*new_r02)));
evalcond[7]=((((-1.0)*new_r02*x624))+(((-1.0)*x622)));
evalcond[8]=((((-1.0)*x623))+((cj0*new_r12)));
evalcond[9]=((((-1.0)*new_r12*x624))+x623);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x625=((1.0)*cj0);
if( IKabs(((((-1.0)*new_r00*x625))+(((-1.0)*new_r01*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x625))+((new_r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x625))+(((-1.0)*new_r01*sj0))))+IKsqr(((((-1.0)*new_r01*x625))+((new_r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*new_r00*x625))+(((-1.0)*new_r01*sj0))), ((((-1.0)*new_r01*x625))+((new_r00*sj0))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x626=IKcos(j2);
IkReal x627=IKsin(j2);
IkReal x628=((1.0)*sj0);
IkReal x629=(sj0*x627);
IkReal x630=(cj0*x626);
IkReal x631=(cj0*x627);
IkReal x632=(x629+x630);
evalcond[0]=(((new_r10*sj0))+x627+((cj0*new_r00)));
evalcond[1]=(((new_r11*sj0))+x626+((cj0*new_r01)));
evalcond[2]=((((-1.0)*new_r00*x628))+x626+((cj0*new_r10)));
evalcond[3]=(x632+new_r01);
evalcond[4]=(x632+new_r10);
evalcond[5]=(x631+(((-1.0)*x626*x628))+new_r00);
evalcond[6]=(((sj0*x626))+(((-1.0)*x631))+new_r11);
evalcond[7]=((((-1.0)*new_r01*x628))+(((-1.0)*x627))+((cj0*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x633=((((-1.0)*sj1))+new_r22);
IkReal x634=(cj1+new_r12);
IkReal x635=((1.0)*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=x633;
evalcond[2]=x633;
evalcond[3]=x634;
evalcond[4]=new_r02;
evalcond[5]=x634;
evalcond[6]=(((new_r12*sj1))+((cj1*new_r22)));
evalcond[7]=(((cj1*new_r10))+(((-1.0)*new_r20*x635)));
evalcond[8]=(((cj1*new_r11))+(((-1.0)*new_r21*x635)));
evalcond[9]=((1.0)+((cj1*new_r12))+(((-1.0)*new_r22*x635)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x636=IKcos(j2);
IkReal x637=IKsin(j2);
IkReal x638=((1.0)*new_r12);
IkReal x639=((1.0)*x636);
evalcond[0]=(x637+new_r00);
evalcond[1]=(x636+new_r01);
evalcond[2]=(((new_r12*x636))+new_r20);
evalcond[3]=(((new_r22*x637))+new_r11);
evalcond[4]=((((-1.0)*x637*x638))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x639))+new_r10);
evalcond[6]=((((-1.0)*new_r21*x638))+((new_r11*new_r22))+x637);
evalcond[7]=((((-1.0)*x639))+(((-1.0)*new_r20*x638))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x640=((((-1.0)*sj1))+new_r22);
IkReal x641=((1.0)*cj1);
IkReal x642=((1.0)*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=x640;
evalcond[2]=x640;
evalcond[3]=((((-1.0)*x641))+new_r12);
evalcond[4]=new_r02;
evalcond[5]=(cj1+(((-1.0)*new_r12)));
evalcond[6]=(((cj1*new_r22))+(((-1.0)*new_r12*x642)));
evalcond[7]=((((-1.0)*new_r10*x641))+(((-1.0)*new_r20*x642)));
evalcond[8]=((((-1.0)*new_r11*x641))+(((-1.0)*new_r21*x642)));
evalcond[9]=((1.0)+(((-1.0)*new_r12*x641))+(((-1.0)*new_r22*x642)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r00, new_r01);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x643=IKsin(j2);
IkReal x644=IKcos(j2);
IkReal x645=((1.0)*new_r22);
IkReal x646=((1.0)*x644);
evalcond[0]=(((new_r12*x643))+new_r21);
evalcond[1]=(x643+(((-1.0)*new_r00)));
evalcond[2]=(x644+(((-1.0)*new_r01)));
evalcond[3]=(((new_r22*x644))+new_r10);
evalcond[4]=((((-1.0)*new_r12*x646))+new_r20);
evalcond[5]=((((-1.0)*x643*x645))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x645))+((new_r12*new_r21))+x643);
evalcond[7]=((((-1.0)*new_r10*x645))+((new_r12*new_r20))+(((-1.0)*x646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x648=IKPowWithIntegerCheck(cj1,-1);
if(!x648.valid){
continue;
}
IkReal x647=x648.value;
CheckValue<IkReal> x649=IKPowWithIntegerCheck(sj0,-1);
if(!x649.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x647)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x647*(x649.value)*((((cj0*new_r21*sj1))+(((-1.0)*cj1*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x647))+IKsqr((x647*(x649.value)*((((cj0*new_r21*sj1))+(((-1.0)*cj1*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r21*x647), (x647*(x649.value)*((((cj0*new_r21*sj1))+(((-1.0)*cj1*new_r11))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x650=IKsin(j2);
IkReal x651=IKcos(j2);
IkReal x652=((1.0)*sj0);
IkReal x653=(cj0*new_r11);
IkReal x654=(cj0*new_r10);
IkReal x655=((1.0)*x651);
IkReal x656=(sj1*x650);
IkReal x657=(sj0*x651);
evalcond[0]=(((cj1*x650))+new_r21);
evalcond[1]=((((-1.0)*cj1*x655))+new_r20);
evalcond[2]=(((new_r10*sj0))+x650+((cj0*new_r00)));
evalcond[3]=(((new_r11*sj0))+x651+((cj0*new_r01)));
evalcond[4]=(((sj1*x657))+new_r00+((cj0*x650)));
evalcond[5]=(x657+new_r11+((cj0*x656)));
evalcond[6]=((((-1.0)*new_r01*x652))+x653+x656);
evalcond[7]=(new_r01+((cj0*x651))+(((-1.0)*x652*x656)));
evalcond[8]=(((sj0*x650))+(((-1.0)*cj0*sj1*x655))+new_r10);
evalcond[9]=((((-1.0)*sj1*x655))+(((-1.0)*new_r00*x652))+x654);
evalcond[10]=((((-1.0)*new_r01*sj1*x652))+((cj1*new_r21))+((sj1*x653))+x650);
evalcond[11]=(((cj1*new_r20))+((sj1*x654))+(((-1.0)*x655))+(((-1.0)*new_r00*sj1*x652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x658=IKPowWithIntegerCheck(cj1,-1);
if(!x658.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x658.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*new_r01))+(((-1.0)*new_r11*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x658.value)))+IKsqr(((((-1.0)*cj0*new_r01))+(((-1.0)*new_r11*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r21*(x658.value)), ((((-1.0)*cj0*new_r01))+(((-1.0)*new_r11*sj0))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x659=IKsin(j2);
IkReal x660=IKcos(j2);
IkReal x661=((1.0)*sj0);
IkReal x662=(cj0*new_r11);
IkReal x663=(cj0*new_r10);
IkReal x664=((1.0)*x660);
IkReal x665=(sj1*x659);
IkReal x666=(sj0*x660);
evalcond[0]=(((cj1*x659))+new_r21);
evalcond[1]=((((-1.0)*cj1*x664))+new_r20);
evalcond[2]=(((new_r10*sj0))+x659+((cj0*new_r00)));
evalcond[3]=(((new_r11*sj0))+x660+((cj0*new_r01)));
evalcond[4]=(((sj1*x666))+new_r00+((cj0*x659)));
evalcond[5]=(((cj0*x665))+x666+new_r11);
evalcond[6]=(x662+x665+(((-1.0)*new_r01*x661)));
evalcond[7]=(((cj0*x660))+(((-1.0)*x661*x665))+new_r01);
evalcond[8]=(((sj0*x659))+new_r10+(((-1.0)*cj0*sj1*x664)));
evalcond[9]=((((-1.0)*sj1*x664))+x663+(((-1.0)*new_r00*x661)));
evalcond[10]=(((cj1*new_r21))+((sj1*x662))+(((-1.0)*new_r01*sj1*x661))+x659);
evalcond[11]=(((cj1*new_r20))+((sj1*x663))+(((-1.0)*new_r00*sj1*x661))+(((-1.0)*x664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x667=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x667.valid){
continue;
}
CheckValue<IkReal> x668 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x668.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x667.value)))+(x668.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x669=IKsin(j2);
IkReal x670=IKcos(j2);
IkReal x671=((1.0)*sj0);
IkReal x672=(cj0*new_r11);
IkReal x673=(cj0*new_r10);
IkReal x674=((1.0)*x670);
IkReal x675=(sj1*x669);
IkReal x676=(sj0*x670);
evalcond[0]=(((cj1*x669))+new_r21);
evalcond[1]=((((-1.0)*cj1*x674))+new_r20);
evalcond[2]=(((new_r10*sj0))+x669+((cj0*new_r00)));
evalcond[3]=(((new_r11*sj0))+x670+((cj0*new_r01)));
evalcond[4]=(((cj0*x669))+((sj1*x676))+new_r00);
evalcond[5]=(((cj0*x675))+x676+new_r11);
evalcond[6]=((((-1.0)*new_r01*x671))+x672+x675);
evalcond[7]=(((cj0*x670))+(((-1.0)*x671*x675))+new_r01);
evalcond[8]=(((sj0*x669))+(((-1.0)*cj0*sj1*x674))+new_r10);
evalcond[9]=((((-1.0)*new_r00*x671))+x673+(((-1.0)*sj1*x674)));
evalcond[10]=((((-1.0)*new_r01*sj1*x671))+((cj1*new_r21))+x669+((sj1*x672)));
evalcond[11]=(((cj1*new_r20))+((sj1*x673))+(((-1.0)*new_r00*sj1*x671))+(((-1.0)*x674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - gummi (9f9e4976f1d523206100b3e6781e1ad6)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
